
MEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004334  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080044bc  080044bc  000144bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004540  08004540  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004548  08004548  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800454c  0800454c  0001454c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  0800455c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  0800455c  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d30f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd3  00000000  00000000  0002d34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  0002ef20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  0002fac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b8f  00000000  00000000  000305b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cede  00000000  00000000  00056147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e933c  00000000  00000000  00063025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c361  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003194  00000000  00000000  0014c3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044a4 	.word	0x080044a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080044a4 	.word	0x080044a4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009d8:	f000 b96e 	b.w	8000cb8 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	4604      	mov	r4, r0
 80009fc:	468c      	mov	ip, r1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f040 8083 	bne.w	8000b0a <__udivmoddi4+0x116>
 8000a04:	428a      	cmp	r2, r1
 8000a06:	4617      	mov	r7, r2
 8000a08:	d947      	bls.n	8000a9a <__udivmoddi4+0xa6>
 8000a0a:	fab2 f282 	clz	r2, r2
 8000a0e:	b142      	cbz	r2, 8000a22 <__udivmoddi4+0x2e>
 8000a10:	f1c2 0020 	rsb	r0, r2, #32
 8000a14:	fa24 f000 	lsr.w	r0, r4, r0
 8000a18:	4091      	lsls	r1, r2
 8000a1a:	4097      	lsls	r7, r2
 8000a1c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a20:	4094      	lsls	r4, r2
 8000a22:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a26:	0c23      	lsrs	r3, r4, #16
 8000a28:	fbbc f6f8 	udiv	r6, ip, r8
 8000a2c:	fa1f fe87 	uxth.w	lr, r7
 8000a30:	fb08 c116 	mls	r1, r8, r6, ip
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f10e 	mul.w	r1, r6, lr
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d909      	bls.n	8000a54 <__udivmoddi4+0x60>
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a46:	f080 8119 	bcs.w	8000c7c <__udivmoddi4+0x288>
 8000a4a:	4299      	cmp	r1, r3
 8000a4c:	f240 8116 	bls.w	8000c7c <__udivmoddi4+0x288>
 8000a50:	3e02      	subs	r6, #2
 8000a52:	443b      	add	r3, r7
 8000a54:	1a5b      	subs	r3, r3, r1
 8000a56:	b2a4      	uxth	r4, r4
 8000a58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a68:	45a6      	cmp	lr, r4
 8000a6a:	d909      	bls.n	8000a80 <__udivmoddi4+0x8c>
 8000a6c:	193c      	adds	r4, r7, r4
 8000a6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a72:	f080 8105 	bcs.w	8000c80 <__udivmoddi4+0x28c>
 8000a76:	45a6      	cmp	lr, r4
 8000a78:	f240 8102 	bls.w	8000c80 <__udivmoddi4+0x28c>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	443c      	add	r4, r7
 8000a80:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a84:	eba4 040e 	sub.w	r4, r4, lr
 8000a88:	2600      	movs	r6, #0
 8000a8a:	b11d      	cbz	r5, 8000a94 <__udivmoddi4+0xa0>
 8000a8c:	40d4      	lsrs	r4, r2
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e9c5 4300 	strd	r4, r3, [r5]
 8000a94:	4631      	mov	r1, r6
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	b902      	cbnz	r2, 8000a9e <__udivmoddi4+0xaa>
 8000a9c:	deff      	udf	#255	; 0xff
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	2a00      	cmp	r2, #0
 8000aa4:	d150      	bne.n	8000b48 <__udivmoddi4+0x154>
 8000aa6:	1bcb      	subs	r3, r1, r7
 8000aa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aac:	fa1f f887 	uxth.w	r8, r7
 8000ab0:	2601      	movs	r6, #1
 8000ab2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ab6:	0c21      	lsrs	r1, r4, #16
 8000ab8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000abc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	d907      	bls.n	8000ad8 <__udivmoddi4+0xe4>
 8000ac8:	1879      	adds	r1, r7, r1
 8000aca:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ace:	d202      	bcs.n	8000ad6 <__udivmoddi4+0xe2>
 8000ad0:	428b      	cmp	r3, r1
 8000ad2:	f200 80e9 	bhi.w	8000ca8 <__udivmoddi4+0x2b4>
 8000ad6:	4684      	mov	ip, r0
 8000ad8:	1ac9      	subs	r1, r1, r3
 8000ada:	b2a3      	uxth	r3, r4
 8000adc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ae4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ae8:	fb08 f800 	mul.w	r8, r8, r0
 8000aec:	45a0      	cmp	r8, r4
 8000aee:	d907      	bls.n	8000b00 <__udivmoddi4+0x10c>
 8000af0:	193c      	adds	r4, r7, r4
 8000af2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x10a>
 8000af8:	45a0      	cmp	r8, r4
 8000afa:	f200 80d9 	bhi.w	8000cb0 <__udivmoddi4+0x2bc>
 8000afe:	4618      	mov	r0, r3
 8000b00:	eba4 0408 	sub.w	r4, r4, r8
 8000b04:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b08:	e7bf      	b.n	8000a8a <__udivmoddi4+0x96>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d909      	bls.n	8000b22 <__udivmoddi4+0x12e>
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	f000 80b1 	beq.w	8000c76 <__udivmoddi4+0x282>
 8000b14:	2600      	movs	r6, #0
 8000b16:	e9c5 0100 	strd	r0, r1, [r5]
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	4631      	mov	r1, r6
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	fab3 f683 	clz	r6, r3
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	d14a      	bne.n	8000bc0 <__udivmoddi4+0x1cc>
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d302      	bcc.n	8000b34 <__udivmoddi4+0x140>
 8000b2e:	4282      	cmp	r2, r0
 8000b30:	f200 80b8 	bhi.w	8000ca4 <__udivmoddi4+0x2b0>
 8000b34:	1a84      	subs	r4, r0, r2
 8000b36:	eb61 0103 	sbc.w	r1, r1, r3
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	468c      	mov	ip, r1
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	d0a8      	beq.n	8000a94 <__udivmoddi4+0xa0>
 8000b42:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b46:	e7a5      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000b48:	f1c2 0320 	rsb	r3, r2, #32
 8000b4c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b50:	4097      	lsls	r7, r2
 8000b52:	fa01 f002 	lsl.w	r0, r1, r2
 8000b56:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b5a:	40d9      	lsrs	r1, r3
 8000b5c:	4330      	orrs	r0, r6
 8000b5e:	0c03      	lsrs	r3, r0, #16
 8000b60:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b64:	fa1f f887 	uxth.w	r8, r7
 8000b68:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b70:	fb06 f108 	mul.w	r1, r6, r8
 8000b74:	4299      	cmp	r1, r3
 8000b76:	fa04 f402 	lsl.w	r4, r4, r2
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x19c>
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000b82:	f080 808d 	bcs.w	8000ca0 <__udivmoddi4+0x2ac>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 808a 	bls.w	8000ca0 <__udivmoddi4+0x2ac>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	443b      	add	r3, r7
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b281      	uxth	r1, r0
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba0:	fb00 f308 	mul.w	r3, r0, r8
 8000ba4:	428b      	cmp	r3, r1
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x1c4>
 8000ba8:	1879      	adds	r1, r7, r1
 8000baa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000bae:	d273      	bcs.n	8000c98 <__udivmoddi4+0x2a4>
 8000bb0:	428b      	cmp	r3, r1
 8000bb2:	d971      	bls.n	8000c98 <__udivmoddi4+0x2a4>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	4439      	add	r1, r7
 8000bb8:	1acb      	subs	r3, r1, r3
 8000bba:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bbe:	e778      	b.n	8000ab2 <__udivmoddi4+0xbe>
 8000bc0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bc4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bc8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bcc:	431c      	orrs	r4, r3
 8000bce:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bd2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bd6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bda:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bde:	431f      	orrs	r7, r3
 8000be0:	0c3b      	lsrs	r3, r7, #16
 8000be2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000be6:	fa1f f884 	uxth.w	r8, r4
 8000bea:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bee:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bf2:	fb09 fa08 	mul.w	sl, r9, r8
 8000bf6:	458a      	cmp	sl, r1
 8000bf8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bfc:	fa00 f306 	lsl.w	r3, r0, r6
 8000c00:	d908      	bls.n	8000c14 <__udivmoddi4+0x220>
 8000c02:	1861      	adds	r1, r4, r1
 8000c04:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c08:	d248      	bcs.n	8000c9c <__udivmoddi4+0x2a8>
 8000c0a:	458a      	cmp	sl, r1
 8000c0c:	d946      	bls.n	8000c9c <__udivmoddi4+0x2a8>
 8000c0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c12:	4421      	add	r1, r4
 8000c14:	eba1 010a 	sub.w	r1, r1, sl
 8000c18:	b2bf      	uxth	r7, r7
 8000c1a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c1e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c22:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c26:	fb00 f808 	mul.w	r8, r0, r8
 8000c2a:	45b8      	cmp	r8, r7
 8000c2c:	d907      	bls.n	8000c3e <__udivmoddi4+0x24a>
 8000c2e:	19e7      	adds	r7, r4, r7
 8000c30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c34:	d22e      	bcs.n	8000c94 <__udivmoddi4+0x2a0>
 8000c36:	45b8      	cmp	r8, r7
 8000c38:	d92c      	bls.n	8000c94 <__udivmoddi4+0x2a0>
 8000c3a:	3802      	subs	r0, #2
 8000c3c:	4427      	add	r7, r4
 8000c3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c42:	eba7 0708 	sub.w	r7, r7, r8
 8000c46:	fba0 8902 	umull	r8, r9, r0, r2
 8000c4a:	454f      	cmp	r7, r9
 8000c4c:	46c6      	mov	lr, r8
 8000c4e:	4649      	mov	r1, r9
 8000c50:	d31a      	bcc.n	8000c88 <__udivmoddi4+0x294>
 8000c52:	d017      	beq.n	8000c84 <__udivmoddi4+0x290>
 8000c54:	b15d      	cbz	r5, 8000c6e <__udivmoddi4+0x27a>
 8000c56:	ebb3 020e 	subs.w	r2, r3, lr
 8000c5a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c5e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c62:	40f2      	lsrs	r2, r6
 8000c64:	ea4c 0202 	orr.w	r2, ip, r2
 8000c68:	40f7      	lsrs	r7, r6
 8000c6a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c6e:	2600      	movs	r6, #0
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	462e      	mov	r6, r5
 8000c78:	4628      	mov	r0, r5
 8000c7a:	e70b      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	e6e9      	b.n	8000a54 <__udivmoddi4+0x60>
 8000c80:	4618      	mov	r0, r3
 8000c82:	e6fd      	b.n	8000a80 <__udivmoddi4+0x8c>
 8000c84:	4543      	cmp	r3, r8
 8000c86:	d2e5      	bcs.n	8000c54 <__udivmoddi4+0x260>
 8000c88:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c8c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c90:	3801      	subs	r0, #1
 8000c92:	e7df      	b.n	8000c54 <__udivmoddi4+0x260>
 8000c94:	4608      	mov	r0, r1
 8000c96:	e7d2      	b.n	8000c3e <__udivmoddi4+0x24a>
 8000c98:	4660      	mov	r0, ip
 8000c9a:	e78d      	b.n	8000bb8 <__udivmoddi4+0x1c4>
 8000c9c:	4681      	mov	r9, r0
 8000c9e:	e7b9      	b.n	8000c14 <__udivmoddi4+0x220>
 8000ca0:	4666      	mov	r6, ip
 8000ca2:	e775      	b.n	8000b90 <__udivmoddi4+0x19c>
 8000ca4:	4630      	mov	r0, r6
 8000ca6:	e74a      	b.n	8000b3e <__udivmoddi4+0x14a>
 8000ca8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cac:	4439      	add	r1, r7
 8000cae:	e713      	b.n	8000ad8 <__udivmoddi4+0xe4>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	e724      	b.n	8000b00 <__udivmoddi4+0x10c>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_idiv0>:
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc0:	f000 fb6d 	bl	800139e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc4:	f000 f82a 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc8:	f000 f8ea 	bl	8000ea0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ccc:	f000 f878 	bl	8000dc0 <MX_I2C1_Init>
  HAL_I2C_Init(&hi2c1);
 8000cd0:	480e      	ldr	r0, [pc, #56]	; (8000d0c <main+0x50>)
 8000cd2:	f000 fe8d 	bl	80019f0 <HAL_I2C_Init>
  MX_USART2_UART_Init();
 8000cd6:	f000 f8b3 	bl	8000e40 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  LPS22HB_Init();
 8000cda:	f000 f927 	bl	8000f2c <LPS22HB_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  	UART_SEND_TXT(&huart2, "Temperature = ", 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	490b      	ldr	r1, [pc, #44]	; (8000d10 <main+0x54>)
 8000ce2:	480c      	ldr	r0, [pc, #48]	; (8000d14 <main+0x58>)
 8000ce4:	f000 f9d0 	bl	8001088 <UART_SEND_TXT>
  	tempC = LPS22HB_GetTemperature();
 8000ce8:	f000 f958 	bl	8000f9c <LPS22HB_GetTemperature>
 8000cec:	4603      	mov	r3, r0
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <main+0x5c>)
 8000cf0:	6013      	str	r3, [r2, #0]
  	UART_SEND_INT(&huart2, tempC, 1);
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <main+0x5c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <main+0x58>)
 8000cfc:	f000 f998 	bl	8001030 <UART_SEND_INT>
  	HAL_Delay(1000);
 8000d00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d04:	f000 fbc0 	bl	8001488 <HAL_Delay>
  	UART_SEND_TXT(&huart2, "Temperature = ", 0);
 8000d08:	e7e9      	b.n	8000cde <main+0x22>
 8000d0a:	bf00      	nop
 8000d0c:	20000028 	.word	0x20000028
 8000d10:	080044bc 	.word	0x080044bc
 8000d14:	2000007c 	.word	0x2000007c
 8000d18:	20000078 	.word	0x20000078

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b096      	sub	sp, #88	; 0x58
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	2244      	movs	r2, #68	; 0x44
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f003 fb70 	bl	8004410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	463b      	mov	r3, r7
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d3e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d42:	f001 fb55 	bl	80023f0 <HAL_PWREx_ControlVoltageScaling>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d4c:	f000 f9be 	bl	80010cc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d50:	2302      	movs	r3, #2
 8000d52:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d62:	2302      	movs	r3, #2
 8000d64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d66:	2301      	movs	r3, #1
 8000d68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d6a:	230a      	movs	r3, #10
 8000d6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d6e:	2307      	movs	r3, #7
 8000d70:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d72:	2302      	movs	r3, #2
 8000d74:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d76:	2302      	movs	r3, #2
 8000d78:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 fb8c 	bl	800249c <HAL_RCC_OscConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d8a:	f000 f99f 	bl	80010cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8e:	230f      	movs	r3, #15
 8000d90:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d92:	2303      	movs	r3, #3
 8000d94:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000da2:	463b      	mov	r3, r7
 8000da4:	2104      	movs	r1, #4
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 ff5e 	bl	8002c68 <HAL_RCC_ClockConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000db2:	f000 f98b 	bl	80010cc <Error_Handler>
  }
}
 8000db6:	bf00      	nop
 8000db8:	3758      	adds	r7, #88	; 0x58
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <MX_I2C1_Init+0x78>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	; (8000e3c <MX_I2C1_Init+0x7c>)
 8000dce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dfa:	480e      	ldr	r0, [pc, #56]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dfc:	f000 fdf8 	bl	80019f0 <HAL_I2C_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e06:	f000 f961 	bl	80010cc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000e0e:	f001 fa49 	bl	80022a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e18:	f000 f958 	bl	80010cc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000e20:	f001 fa8b 	bl	800233a <HAL_I2CEx_ConfigDigitalFilter>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e2a:	f000 f94f 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000028 	.word	0x20000028
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	10909cec 	.word	0x10909cec

08000e40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e46:	4a15      	ldr	r2, [pc, #84]	; (8000e9c <MX_USART2_UART_Init+0x5c>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e84:	f002 fdb2 	bl	80039ec <HAL_UART_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e8e:	f000 f91d 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000007c 	.word	0x2000007c
 8000e9c:	40004400 	.word	0x40004400

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_GPIO_Init+0x44>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <MX_GPIO_Init+0x44>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_GPIO_Init+0x44>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_GPIO_Init+0x44>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <MX_GPIO_Init+0x44>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_GPIO_Init+0x44>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <LPS22HB_GetStatus>:
/* USER CODE BEGIN 4 */
//
//	Returns the LPS22HB status
//
uint8_t LPS22HB_GetStatus(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af02      	add	r7, sp, #8
	uint8_t byte;
	byte = 0x27;
 8000eee:	2327      	movs	r3, #39	; 0x27
 8000ef0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, LPS22HBW, &byte, 1, 500);
 8000ef2:	1dfa      	adds	r2, r7, #7
 8000ef4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2301      	movs	r3, #1
 8000efc:	21ba      	movs	r1, #186	; 0xba
 8000efe:	4809      	ldr	r0, [pc, #36]	; (8000f24 <LPS22HB_GetStatus+0x3c>)
 8000f00:	f000 fe06 	bl	8001b10 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, LPS22HBR, Dat, 1, 500);
 8000f04:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <LPS22HB_GetStatus+0x40>)
 8000f0e:	21bb      	movs	r1, #187	; 0xbb
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <LPS22HB_GetStatus+0x3c>)
 8000f12:	f000 fef1 	bl	8001cf8 <HAL_I2C_Master_Receive>
	return Dat[0];
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <LPS22HB_GetStatus+0x40>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000028 	.word	0x20000028
 8000f28:	20000074 	.word	0x20000074

08000f2c <LPS22HB_Init>:

//
// Initializes the LPS22HB
//
void LPS22HB_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af02      	add	r7, sp, #8
	Dat[0] = CTRL_REG1;
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <LPS22HB_Init+0x68>)
 8000f34:	2210      	movs	r2, #16
 8000f36:	701a      	strb	r2, [r3, #0]
	Dat[1] = 0x3A;
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <LPS22HB_Init+0x68>)
 8000f3a:	223a      	movs	r2, #58	; 0x3a
 8000f3c:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LPS22HBW, Dat, 2, 500);
 8000f3e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2302      	movs	r3, #2
 8000f46:	4a13      	ldr	r2, [pc, #76]	; (8000f94 <LPS22HB_Init+0x68>)
 8000f48:	21ba      	movs	r1, #186	; 0xba
 8000f4a:	4813      	ldr	r0, [pc, #76]	; (8000f98 <LPS22HB_Init+0x6c>)
 8000f4c:	f000 fde0 	bl	8001b10 <HAL_I2C_Master_Transmit>

	Dat[0] = CTRL_REG2;
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <LPS22HB_Init+0x68>)
 8000f52:	2211      	movs	r2, #17
 8000f54:	701a      	strb	r2, [r3, #0]
	Dat[1] = 0x10;
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <LPS22HB_Init+0x68>)
 8000f58:	2210      	movs	r2, #16
 8000f5a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LPS22HBW, Dat, 2, 500);
 8000f5c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2302      	movs	r3, #2
 8000f64:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LPS22HB_Init+0x68>)
 8000f66:	21ba      	movs	r1, #186	; 0xba
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <LPS22HB_Init+0x6c>)
 8000f6a:	f000 fdd1 	bl	8001b10 <HAL_I2C_Master_Transmit>

	Dat[0] = FIFO_CTRL;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <LPS22HB_Init+0x68>)
 8000f70:	2213      	movs	r2, #19
 8000f72:	701a      	strb	r2, [r3, #0]
	Dat[1] = 0x02;
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <LPS22HB_Init+0x68>)
 8000f76:	2202      	movs	r2, #2
 8000f78:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LPS22HBW, Dat, 2, 500);
 8000f7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2302      	movs	r3, #2
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <LPS22HB_Init+0x68>)
 8000f84:	21ba      	movs	r1, #186	; 0xba
 8000f86:	4804      	ldr	r0, [pc, #16]	; (8000f98 <LPS22HB_Init+0x6c>)
 8000f88:	f000 fdc2 	bl	8001b10 <HAL_I2C_Master_Transmit>
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000074 	.word	0x20000074
 8000f98:	20000028 	.word	0x20000028

08000f9c <LPS22HB_GetTemperature>:

//
//	Function to get the temperature from LPS22HB
//
int LPS22HB_GetTemperature(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af02      	add	r7, sp, #8
	uint16_t temperature;
	int temp;

	while ((LPS22HB_GetStatus() & 2) == 0)
 8000fa2:	e002      	b.n	8000faa <LPS22HB_GetTemperature+0xe>
		HAL_Delay(100);
 8000fa4:	2064      	movs	r0, #100	; 0x64
 8000fa6:	f000 fa6f 	bl	8001488 <HAL_Delay>
	while ((LPS22HB_GetStatus() & 2) == 0)
 8000faa:	f7ff ff9d 	bl	8000ee8 <LPS22HB_GetStatus>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0f5      	beq.n	8000fa4 <LPS22HB_GetTemperature+0x8>

	Dat[0] = 0x2B;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <LPS22HB_GetTemperature+0x88>)
 8000fba:	222b      	movs	r2, #43	; 0x2b
 8000fbc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, LPS22HBW, Dat, 1, 500);
 8000fbe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	4a17      	ldr	r2, [pc, #92]	; (8001024 <LPS22HB_GetTemperature+0x88>)
 8000fc8:	21ba      	movs	r1, #186	; 0xba
 8000fca:	4817      	ldr	r0, [pc, #92]	; (8001028 <LPS22HB_GetTemperature+0x8c>)
 8000fcc:	f000 fda0 	bl	8001b10 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, LPS22HBR, Dat, 2, 500);
 8000fd0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	4a12      	ldr	r2, [pc, #72]	; (8001024 <LPS22HB_GetTemperature+0x88>)
 8000fda:	21bb      	movs	r1, #187	; 0xbb
 8000fdc:	4812      	ldr	r0, [pc, #72]	; (8001028 <LPS22HB_GetTemperature+0x8c>)
 8000fde:	f000 fe8b 	bl	8001cf8 <HAL_I2C_Master_Receive>
	temperature = (((uint16_t)Dat[1]) << 8) | (uint16_t)Dat[0];
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <LPS22HB_GetTemperature+0x88>)
 8000fe4:	785b      	ldrb	r3, [r3, #1]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <LPS22HB_GetTemperature+0x88>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	80fb      	strh	r3, [r7, #6]
	temp = temperature / 100.0;
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fa3f 	bl	800047c <__aeabi_i2d>
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <LPS22HB_GetTemperature+0x90>)
 8001004:	f7ff fbce 	bl	80007a4 <__aeabi_ddiv>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fcb0 	bl	8000974 <__aeabi_d2iz>
 8001014:	4603      	mov	r3, r0
 8001016:	603b      	str	r3, [r7, #0]
	return temp;
 8001018:	683b      	ldr	r3, [r7, #0]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000074 	.word	0x20000074
 8001028:	20000028 	.word	0x20000028
 800102c:	40590000 	.word	0x40590000

08001030 <UART_SEND_INT>:
}
//
// Send an integer number to PC
//
void UART_SEND_INT(UART_HandleTypeDef *huart, int i, int m)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
	char buffer[10];
	itoa(i, buffer, 10);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	220a      	movs	r2, #10
 8001042:	4619      	mov	r1, r3
 8001044:	68b8      	ldr	r0, [r7, #8]
 8001046:	f003 f9e1 	bl	800440c <itoa>
	HAL_UART_Transmit(huart, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff f8ba 	bl	80001c8 <strlen>
 8001054:	4603      	mov	r3, r0
 8001056:	b29a      	uxth	r2, r3
 8001058:	f107 0114 	add.w	r1, r7, #20
 800105c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f002 fd11 	bl	8003a88 <HAL_UART_Transmit>
	if(m == 1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d106      	bne.n	800107a <UART_SEND_INT+0x4a>
	{
		HAL_UART_Transmit(huart, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 800106c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001070:	2202      	movs	r2, #2
 8001072:	4904      	ldr	r1, [pc, #16]	; (8001084 <UART_SEND_INT+0x54>)
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f002 fd07 	bl	8003a88 <HAL_UART_Transmit>
	}
}
 800107a:	bf00      	nop
 800107c:	3720      	adds	r7, #32
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	080044cc 	.word	0x080044cc

08001088 <UART_SEND_TXT>:
//
// Send text to PC
//
void UART_SEND_TXT(UART_HandleTypeDef *huart, char buffer[], int m)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(huart, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8001094:	68b8      	ldr	r0, [r7, #8]
 8001096:	f7ff f897 	bl	80001c8 <strlen>
 800109a:	4603      	mov	r3, r0
 800109c:	b29a      	uxth	r2, r3
 800109e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f002 fcef 	bl	8003a88 <HAL_UART_Transmit>
	if(m == 1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d106      	bne.n	80010be <UART_SEND_TXT+0x36>
	{
		HAL_UART_Transmit(huart, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010b4:	2202      	movs	r2, #2
 80010b6:	4904      	ldr	r1, [pc, #16]	; (80010c8 <UART_SEND_TXT+0x40>)
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f002 fce5 	bl	8003a88 <HAL_UART_Transmit>
	}
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	080044cc 	.word	0x080044cc

080010cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d0:	b672      	cpsid	i
}
 80010d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <Error_Handler+0x8>
	...

080010d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_MspInit+0x44>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_MspInit+0x44>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_MspInit+0x44>)
 80010ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_MspInit+0x44>)
 80010f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <HAL_MspInit+0x44>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	6593      	str	r3, [r2, #88]	; 0x58
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_MspInit+0x44>)
 8001104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0ac      	sub	sp, #176	; 0xb0
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2288      	movs	r2, #136	; 0x88
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f003 f965 	bl	8004410 <memset>
  if(hi2c->Instance==I2C1)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <HAL_I2C_MspInit+0xb0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d13b      	bne.n	80011c8 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001150:	2340      	movs	r3, #64	; 0x40
 8001152:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001154:	2300      	movs	r3, #0
 8001156:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4618      	mov	r0, r3
 800115e:	f001 ff89 	bl	8003074 <HAL_RCCEx_PeriphCLKConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001168:	f7ff ffb0 	bl	80010cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_I2C_MspInit+0xb4>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_I2C_MspInit+0xb4>)
 8001172:	f043 0302 	orr.w	r3, r3, #2
 8001176:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_I2C_MspInit+0xb4>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001184:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001188:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118c:	2312      	movs	r3, #18
 800118e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800119e:	2304      	movs	r3, #4
 80011a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011a8:	4619      	mov	r1, r3
 80011aa:	480b      	ldr	r0, [pc, #44]	; (80011d8 <HAL_I2C_MspInit+0xb8>)
 80011ac:	f000 fa76 	bl	800169c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_I2C_MspInit+0xb4>)
 80011b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_I2C_MspInit+0xb4>)
 80011b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ba:	6593      	str	r3, [r2, #88]	; 0x58
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_I2C_MspInit+0xb4>)
 80011be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011c8:	bf00      	nop
 80011ca:	37b0      	adds	r7, #176	; 0xb0
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40005400 	.word	0x40005400
 80011d4:	40021000 	.word	0x40021000
 80011d8:	48000400 	.word	0x48000400

080011dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b0ac      	sub	sp, #176	; 0xb0
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2288      	movs	r2, #136	; 0x88
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 f907 	bl	8004410 <memset>
  if(huart->Instance==USART2)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a21      	ldr	r2, [pc, #132]	; (800128c <HAL_UART_MspInit+0xb0>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d13b      	bne.n	8001284 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800120c:	2302      	movs	r3, #2
 800120e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001210:	2300      	movs	r3, #0
 8001212:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4618      	mov	r0, r3
 800121a:	f001 ff2b 	bl	8003074 <HAL_RCCEx_PeriphCLKConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001224:	f7ff ff52 	bl	80010cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_UART_MspInit+0xb4>)
 800122a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122c:	4a18      	ldr	r2, [pc, #96]	; (8001290 <HAL_UART_MspInit+0xb4>)
 800122e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001232:	6593      	str	r3, [r2, #88]	; 0x58
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_UART_MspInit+0xb4>)
 8001236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_UART_MspInit+0xb4>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	4a12      	ldr	r2, [pc, #72]	; (8001290 <HAL_UART_MspInit+0xb4>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <HAL_UART_MspInit+0xb4>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001258:	230c      	movs	r3, #12
 800125a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001270:	2307      	movs	r3, #7
 8001272:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800127a:	4619      	mov	r1, r3
 800127c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001280:	f000 fa0c 	bl	800169c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001284:	bf00      	nop
 8001286:	37b0      	adds	r7, #176	; 0xb0
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40004400 	.word	0x40004400
 8001290:	40021000 	.word	0x40021000

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <NMI_Handler+0x4>

0800129a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MemManage_Handler+0x4>

080012a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e0:	f000 f8b2 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <SystemInit+0x5c>)
 80012ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f2:	4a14      	ldr	r2, [pc, #80]	; (8001344 <SystemInit+0x5c>)
 80012f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <SystemInit+0x60>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a11      	ldr	r2, [pc, #68]	; (8001348 <SystemInit+0x60>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <SystemInit+0x60>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <SystemInit+0x60>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <SystemInit+0x60>)
 8001314:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001318:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800131c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <SystemInit+0x60>)
 8001320:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001324:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <SystemInit+0x60>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a07      	ldr	r2, [pc, #28]	; (8001348 <SystemInit+0x60>)
 800132c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001330:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <SystemInit+0x60>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed00 	.word	0xe000ed00
 8001348:	40021000 	.word	0x40021000

0800134c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800134c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001384 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001350:	f7ff ffca 	bl	80012e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001354:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001356:	e003      	b.n	8001360 <LoopCopyDataInit>

08001358 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800135a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800135c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800135e:	3104      	adds	r1, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001360:	480a      	ldr	r0, [pc, #40]	; (800138c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001364:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001366:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001368:	d3f6      	bcc.n	8001358 <CopyDataInit>
	ldr	r2, =_sbss
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <LoopForever+0x12>)
	b	LoopFillZerobss
 800136c:	e002      	b.n	8001374 <LoopFillZerobss>

0800136e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800136e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001370:	f842 3b04 	str.w	r3, [r2], #4

08001374 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <LoopForever+0x16>)
	cmp	r2, r3
 8001376:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001378:	d3f9      	bcc.n	800136e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137a:	f003 f80b 	bl	8004394 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800137e:	f7ff fc9d 	bl	8000cbc <main>

08001382 <LoopForever>:

LoopForever:
    b LoopForever
 8001382:	e7fe      	b.n	8001382 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001384:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001388:	08004550 	.word	0x08004550
	ldr	r0, =_sdata
 800138c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001390:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001394:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001398:	20000104 	.word	0x20000104

0800139c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC1_2_IRQHandler>

0800139e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f943 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ae:	200f      	movs	r0, #15
 80013b0:	f000 f80e 	bl	80013d0 <HAL_InitTick>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	71fb      	strb	r3, [r7, #7]
 80013be:	e001      	b.n	80013c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013c0:	f7ff fe8a 	bl	80010d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013c4:	79fb      	ldrb	r3, [r7, #7]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <HAL_InitTick+0x6c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d023      	beq.n	800142c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_InitTick+0x70>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <HAL_InitTick+0x6c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f941 	bl	8001682 <HAL_SYSTICK_Config>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10f      	bne.n	8001426 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0f      	cmp	r3, #15
 800140a:	d809      	bhi.n	8001420 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001414:	f000 f919 	bl	800164a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001418:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <HAL_InitTick+0x74>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e007      	b.n	8001430 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	73fb      	strb	r3, [r7, #15]
 8001424:	e004      	b.n	8001430 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	73fb      	strb	r3, [r7, #15]
 800142a:	e001      	b.n	8001430 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001430:	7bfb      	ldrb	r3, [r7, #15]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000008 	.word	0x20000008
 8001440:	20000000 	.word	0x20000000
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008
 800146c:	20000100 	.word	0x20000100

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000100 	.word	0x20000100

08001488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff ffee 	bl	8001470 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014a0:	d005      	beq.n	80014ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_Delay+0x44>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ae:	bf00      	nop
 80014b0:	f7ff ffde 	bl	8001470 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8f7      	bhi.n	80014b0 <HAL_Delay+0x28>
  {
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	; (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
         );
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001614:	f7ff ff8e 	bl	8001534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff47 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff5c 	bl	8001518 <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff8e 	bl	8001588 <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5d 	bl	8001534 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffb0 	bl	80015f0 <SysTick_Config>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016aa:	e17f      	b.n	80019ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2101      	movs	r1, #1
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	4013      	ands	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 8171 	beq.w	80019a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d00b      	beq.n	80016e4 <HAL_GPIO_Init+0x48>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d007      	beq.n	80016e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016d8:	2b11      	cmp	r3, #17
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b12      	cmp	r3, #18
 80016e2:	d130      	bne.n	8001746 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800171a:	2201      	movs	r2, #1
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	091b      	lsrs	r3, r3, #4
 8001730:	f003 0201 	and.w	r2, r3, #1
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b03      	cmp	r3, #3
 8001750:	d118      	bne.n	8001784 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001758:	2201      	movs	r2, #1
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	08db      	lsrs	r3, r3, #3
 800176e:	f003 0201 	and.w	r2, r3, #1
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	2203      	movs	r2, #3
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_Init+0x128>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b12      	cmp	r3, #18
 80017c2:	d123      	bne.n	800180c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	08da      	lsrs	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3208      	adds	r2, #8
 80017cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	691a      	ldr	r2, [r3, #16]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	08da      	lsrs	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3208      	adds	r2, #8
 8001806:	6939      	ldr	r1, [r7, #16]
 8001808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	2203      	movs	r2, #3
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0203 	and.w	r2, r3, #3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80ac 	beq.w	80019a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	4b5f      	ldr	r3, [pc, #380]	; (80019cc <HAL_GPIO_Init+0x330>)
 8001850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001852:	4a5e      	ldr	r2, [pc, #376]	; (80019cc <HAL_GPIO_Init+0x330>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6613      	str	r3, [r2, #96]	; 0x60
 800185a:	4b5c      	ldr	r3, [pc, #368]	; (80019cc <HAL_GPIO_Init+0x330>)
 800185c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001866:	4a5a      	ldr	r2, [pc, #360]	; (80019d0 <HAL_GPIO_Init+0x334>)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001890:	d025      	beq.n	80018de <HAL_GPIO_Init+0x242>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4f      	ldr	r2, [pc, #316]	; (80019d4 <HAL_GPIO_Init+0x338>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d01f      	beq.n	80018da <HAL_GPIO_Init+0x23e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4e      	ldr	r2, [pc, #312]	; (80019d8 <HAL_GPIO_Init+0x33c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d019      	beq.n	80018d6 <HAL_GPIO_Init+0x23a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4d      	ldr	r2, [pc, #308]	; (80019dc <HAL_GPIO_Init+0x340>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_GPIO_Init+0x236>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4c      	ldr	r2, [pc, #304]	; (80019e0 <HAL_GPIO_Init+0x344>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d00d      	beq.n	80018ce <HAL_GPIO_Init+0x232>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4b      	ldr	r2, [pc, #300]	; (80019e4 <HAL_GPIO_Init+0x348>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d007      	beq.n	80018ca <HAL_GPIO_Init+0x22e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4a      	ldr	r2, [pc, #296]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d101      	bne.n	80018c6 <HAL_GPIO_Init+0x22a>
 80018c2:	2306      	movs	r3, #6
 80018c4:	e00c      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018c6:	2307      	movs	r3, #7
 80018c8:	e00a      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018ca:	2305      	movs	r3, #5
 80018cc:	e008      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018ce:	2304      	movs	r3, #4
 80018d0:	e006      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018d2:	2303      	movs	r3, #3
 80018d4:	e004      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e002      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018de:	2300      	movs	r3, #0
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	f002 0203 	and.w	r2, r2, #3
 80018e6:	0092      	lsls	r2, r2, #2
 80018e8:	4093      	lsls	r3, r2
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018f0:	4937      	ldr	r1, [pc, #220]	; (80019d0 <HAL_GPIO_Init+0x334>)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	3302      	adds	r3, #2
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018fe:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <HAL_GPIO_Init+0x350>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001922:	4a32      	ldr	r2, [pc, #200]	; (80019ec <HAL_GPIO_Init+0x350>)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001928:	4b30      	ldr	r3, [pc, #192]	; (80019ec <HAL_GPIO_Init+0x350>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800194c:	4a27      	ldr	r2, [pc, #156]	; (80019ec <HAL_GPIO_Init+0x350>)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001952:	4b26      	ldr	r3, [pc, #152]	; (80019ec <HAL_GPIO_Init+0x350>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001976:	4a1d      	ldr	r2, [pc, #116]	; (80019ec <HAL_GPIO_Init+0x350>)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <HAL_GPIO_Init+0x350>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019a0:	4a12      	ldr	r2, [pc, #72]	; (80019ec <HAL_GPIO_Init+0x350>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa22 f303 	lsr.w	r3, r2, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f47f ae78 	bne.w	80016ac <HAL_GPIO_Init+0x10>
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	371c      	adds	r7, #28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010000 	.word	0x40010000
 80019d4:	48000400 	.word	0x48000400
 80019d8:	48000800 	.word	0x48000800
 80019dc:	48000c00 	.word	0x48000c00
 80019e0:	48001000 	.word	0x48001000
 80019e4:	48001400 	.word	0x48001400
 80019e8:	48001800 	.word	0x48001800
 80019ec:	40010400 	.word	0x40010400

080019f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e081      	b.n	8001b06 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d106      	bne.n	8001a1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fb82 	bl	8001120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2224      	movs	r2, #36	; 0x24
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d107      	bne.n	8001a6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	e006      	b.n	8001a78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d104      	bne.n	8001a8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	ea42 0103 	orr.w	r1, r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	021a      	lsls	r2, r3, #8
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69d9      	ldr	r1, [r3, #28]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1a      	ldr	r2, [r3, #32]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0201 	orr.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2220      	movs	r2, #32
 8001af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	817b      	strh	r3, [r7, #10]
 8001b20:	4613      	mov	r3, r2
 8001b22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	f040 80da 	bne.w	8001ce6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_I2C_Master_Transmit+0x30>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e0d3      	b.n	8001ce8 <HAL_I2C_Master_Transmit+0x1d8>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b48:	f7ff fc92 	bl	8001470 <HAL_GetTick>
 8001b4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2319      	movs	r3, #25
 8001b54:	2201      	movs	r2, #1
 8001b56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f9e6 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e0be      	b.n	8001ce8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2221      	movs	r2, #33	; 0x21
 8001b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2210      	movs	r2, #16
 8001b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	893a      	ldrh	r2, [r7, #8]
 8001b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2bff      	cmp	r3, #255	; 0xff
 8001b9a:	d90e      	bls.n	8001bba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	22ff      	movs	r2, #255	; 0xff
 8001ba0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	8979      	ldrh	r1, [r7, #10]
 8001baa:	4b51      	ldr	r3, [pc, #324]	; (8001cf0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 fb48 	bl	8002248 <I2C_TransferConfig>
 8001bb8:	e06c      	b.n	8001c94 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	8979      	ldrh	r1, [r7, #10]
 8001bcc:	4b48      	ldr	r3, [pc, #288]	; (8001cf0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fb37 	bl	8002248 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001bda:	e05b      	b.n	8001c94 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	6a39      	ldr	r1, [r7, #32]
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f000 f9e3 	bl	8001fac <I2C_WaitOnTXISFlagUntilTimeout>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e07b      	b.n	8001ce8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	781a      	ldrb	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d034      	beq.n	8001c94 <HAL_I2C_Master_Transmit+0x184>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d130      	bne.n	8001c94 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 f975 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e04d      	b.n	8001ce8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	2bff      	cmp	r3, #255	; 0xff
 8001c54:	d90e      	bls.n	8001c74 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	22ff      	movs	r2, #255	; 0xff
 8001c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	8979      	ldrh	r1, [r7, #10]
 8001c64:	2300      	movs	r3, #0
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 faeb 	bl	8002248 <I2C_TransferConfig>
 8001c72:	e00f      	b.n	8001c94 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	8979      	ldrh	r1, [r7, #10]
 8001c86:	2300      	movs	r3, #0
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 fada 	bl	8002248 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d19e      	bne.n	8001bdc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	6a39      	ldr	r1, [r7, #32]
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 f9c2 	bl	800202c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e01a      	b.n	8001ce8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6859      	ldr	r1, [r3, #4]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_I2C_Master_Transmit+0x1e4>)
 8001cc6:	400b      	ands	r3, r1
 8001cc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e000      	b.n	8001ce8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001ce6:	2302      	movs	r3, #2
  }
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	80002000 	.word	0x80002000
 8001cf4:	fe00e800 	.word	0xfe00e800

08001cf8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	461a      	mov	r2, r3
 8001d04:	460b      	mov	r3, r1
 8001d06:	817b      	strh	r3, [r7, #10]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	f040 80db 	bne.w	8001ed0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_I2C_Master_Receive+0x30>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e0d4      	b.n	8001ed2 <HAL_I2C_Master_Receive+0x1da>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d30:	f7ff fb9e 	bl	8001470 <HAL_GetTick>
 8001d34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	2319      	movs	r3, #25
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f8f2 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e0bf      	b.n	8001ed2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2222      	movs	r2, #34	; 0x22
 8001d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	893a      	ldrh	r2, [r7, #8]
 8001d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	2bff      	cmp	r3, #255	; 0xff
 8001d82:	d90e      	bls.n	8001da2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	22ff      	movs	r2, #255	; 0xff
 8001d88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	8979      	ldrh	r1, [r7, #10]
 8001d92:	4b52      	ldr	r3, [pc, #328]	; (8001edc <HAL_I2C_Master_Receive+0x1e4>)
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 fa54 	bl	8002248 <I2C_TransferConfig>
 8001da0:	e06d      	b.n	8001e7e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	8979      	ldrh	r1, [r7, #10]
 8001db4:	4b49      	ldr	r3, [pc, #292]	; (8001edc <HAL_I2C_Master_Receive+0x1e4>)
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 fa43 	bl	8002248 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001dc2:	e05c      	b.n	8001e7e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	6a39      	ldr	r1, [r7, #32]
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 f96b 	bl	80020a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e07c      	b.n	8001ed2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d034      	beq.n	8001e7e <HAL_I2C_Master_Receive+0x186>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d130      	bne.n	8001e7e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	2200      	movs	r2, #0
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f880 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e04d      	b.n	8001ed2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	2bff      	cmp	r3, #255	; 0xff
 8001e3e:	d90e      	bls.n	8001e5e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	22ff      	movs	r2, #255	; 0xff
 8001e44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	8979      	ldrh	r1, [r7, #10]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f9f6 	bl	8002248 <I2C_TransferConfig>
 8001e5c:	e00f      	b.n	8001e7e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	8979      	ldrh	r1, [r7, #10]
 8001e70:	2300      	movs	r3, #0
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 f9e5 	bl	8002248 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d19d      	bne.n	8001dc4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	6a39      	ldr	r1, [r7, #32]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f8cd 	bl	800202c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e01a      	b.n	8001ed2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6859      	ldr	r1, [r3, #4]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_I2C_Master_Receive+0x1e8>)
 8001eb0:	400b      	ands	r3, r1
 8001eb2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e000      	b.n	8001ed2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001ed0:	2302      	movs	r3, #2
  }
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	80002400 	.word	0x80002400
 8001ee0:	fe00e800 	.word	0xfe00e800

08001ee4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d103      	bne.n	8001f02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2200      	movs	r2, #0
 8001f00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d007      	beq.n	8001f20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699a      	ldr	r2, [r3, #24]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	619a      	str	r2, [r3, #24]
  }
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f3c:	e022      	b.n	8001f84 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f44:	d01e      	beq.n	8001f84 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f46:	f7ff fa93 	bl	8001470 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d302      	bcc.n	8001f5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d113      	bne.n	8001f84 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	f043 0220 	orr.w	r2, r3, #32
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e00f      	b.n	8001fa4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d0cd      	beq.n	8001f3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fb8:	e02c      	b.n	8002014 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f8dc 	bl	800217c <I2C_IsAcknowledgeFailed>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e02a      	b.n	8002024 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fd4:	d01e      	beq.n	8002014 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd6:	f7ff fa4b 	bl	8001470 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d302      	bcc.n	8001fec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d113      	bne.n	8002014 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e007      	b.n	8002024 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b02      	cmp	r3, #2
 8002020:	d1cb      	bne.n	8001fba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002038:	e028      	b.n	800208c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f89c 	bl	800217c <I2C_IsAcknowledgeFailed>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e026      	b.n	800209c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800204e:	f7ff fa0f 	bl	8001470 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	429a      	cmp	r2, r3
 800205c:	d302      	bcc.n	8002064 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d113      	bne.n	800208c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002068:	f043 0220 	orr.w	r2, r3, #32
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e007      	b.n	800209c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b20      	cmp	r3, #32
 8002098:	d1cf      	bne.n	800203a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020b0:	e055      	b.n	800215e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f860 	bl	800217c <I2C_IsAcknowledgeFailed>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e053      	b.n	800216e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d129      	bne.n	8002128 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d105      	bne.n	80020ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e03f      	b.n	800216e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2220      	movs	r2, #32
 80020f4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002102:	400b      	ands	r3, r1
 8002104:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e022      	b.n	800216e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002128:	f7ff f9a2 	bl	8001470 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	429a      	cmp	r2, r3
 8002136:	d302      	bcc.n	800213e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10f      	bne.n	800215e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f043 0220 	orr.w	r2, r3, #32
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2220      	movs	r2, #32
 800214e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e007      	b.n	800216e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b04      	cmp	r3, #4
 800216a:	d1a2      	bne.n	80020b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	fe00e800 	.word	0xfe00e800

0800217c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b10      	cmp	r3, #16
 8002194:	d151      	bne.n	800223a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002196:	e022      	b.n	80021de <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800219e:	d01e      	beq.n	80021de <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a0:	f7ff f966 	bl	8001470 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d302      	bcc.n	80021b6 <I2C_IsAcknowledgeFailed+0x3a>
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d113      	bne.n	80021de <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	f043 0220 	orr.w	r2, r3, #32
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2220      	movs	r2, #32
 80021c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e02e      	b.n	800223c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d1d5      	bne.n	8002198 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2210      	movs	r2, #16
 80021f2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2220      	movs	r2, #32
 80021fa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f7ff fe71 	bl	8001ee4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6859      	ldr	r1, [r3, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <I2C_IsAcknowledgeFailed+0xc8>)
 800220e:	400b      	ands	r3, r1
 8002210:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	f043 0204 	orr.w	r2, r3, #4
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2220      	movs	r2, #32
 8002222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	fe00e800 	.word	0xfe00e800

08002248 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	460b      	mov	r3, r1
 8002254:	817b      	strh	r3, [r7, #10]
 8002256:	4613      	mov	r3, r2
 8002258:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	0d5b      	lsrs	r3, r3, #21
 8002264:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002268:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <I2C_TransferConfig+0x58>)
 800226a:	430b      	orrs	r3, r1
 800226c:	43db      	mvns	r3, r3
 800226e:	ea02 0103 	and.w	r1, r2, r3
 8002272:	897b      	ldrh	r3, [r7, #10]
 8002274:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002278:	7a7b      	ldrb	r3, [r7, #9]
 800227a:	041b      	lsls	r3, r3, #16
 800227c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	431a      	orrs	r2, r3
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	431a      	orrs	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	03ff63ff 	.word	0x03ff63ff

080022a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d138      	bne.n	800232c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e032      	b.n	800232e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2224      	movs	r2, #36	; 0x24
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6819      	ldr	r1, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	e000      	b.n	800232e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800232c:	2302      	movs	r3, #2
  }
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800233a:	b480      	push	{r7}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b20      	cmp	r3, #32
 800234e:	d139      	bne.n	80023c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800235a:	2302      	movs	r3, #2
 800235c:	e033      	b.n	80023c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2224      	movs	r2, #36	; 0x24
 800236a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0201 	bic.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800238c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	e000      	b.n	80023c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023c4:	2302      	movs	r3, #2
  }
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <HAL_PWREx_GetVoltageRange+0x18>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40007000 	.word	0x40007000

080023f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023fe:	d130      	bne.n	8002462 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002400:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800240c:	d038      	beq.n	8002480 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800240e:	4b20      	ldr	r3, [pc, #128]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002416:	4a1e      	ldr	r2, [pc, #120]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002418:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800241c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2232      	movs	r2, #50	; 0x32
 8002424:	fb02 f303 	mul.w	r3, r2, r3
 8002428:	4a1b      	ldr	r2, [pc, #108]	; (8002498 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	0c9b      	lsrs	r3, r3, #18
 8002430:	3301      	adds	r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002434:	e002      	b.n	800243c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	3b01      	subs	r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800243c:	4b14      	ldr	r3, [pc, #80]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002448:	d102      	bne.n	8002450 <HAL_PWREx_ControlVoltageScaling+0x60>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f2      	bne.n	8002436 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245c:	d110      	bne.n	8002480 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e00f      	b.n	8002482 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800246a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246e:	d007      	beq.n	8002480 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002470:	4b07      	ldr	r3, [pc, #28]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002478:	4a05      	ldr	r2, [pc, #20]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800247a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800247e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40007000 	.word	0x40007000
 8002494:	20000000 	.word	0x20000000
 8002498:	431bde83 	.word	0x431bde83

0800249c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e3d4      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ae:	4ba1      	ldr	r3, [pc, #644]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024b8:	4b9e      	ldr	r3, [pc, #632]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 80e4 	beq.w	8002698 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <HAL_RCC_OscConfig+0x4a>
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	2b0c      	cmp	r3, #12
 80024da:	f040 808b 	bne.w	80025f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	f040 8087 	bne.w	80025f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024e6:	4b93      	ldr	r3, [pc, #588]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_RCC_OscConfig+0x62>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e3ac      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1a      	ldr	r2, [r3, #32]
 8002502:	4b8c      	ldr	r3, [pc, #560]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d004      	beq.n	8002518 <HAL_RCC_OscConfig+0x7c>
 800250e:	4b89      	ldr	r3, [pc, #548]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002516:	e005      	b.n	8002524 <HAL_RCC_OscConfig+0x88>
 8002518:	4b86      	ldr	r3, [pc, #536]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 800251a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002524:	4293      	cmp	r3, r2
 8002526:	d223      	bcs.n	8002570 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fd41 	bl	8002fb4 <RCC_SetFlashLatencyFromMSIRange>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e38d      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800253c:	4b7d      	ldr	r3, [pc, #500]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a7c      	ldr	r2, [pc, #496]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 8002542:	f043 0308 	orr.w	r3, r3, #8
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b7a      	ldr	r3, [pc, #488]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	4977      	ldr	r1, [pc, #476]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800255a:	4b76      	ldr	r3, [pc, #472]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	4972      	ldr	r1, [pc, #456]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
 800256e:	e025      	b.n	80025bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002570:	4b70      	ldr	r3, [pc, #448]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a6f      	ldr	r2, [pc, #444]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 8002576:	f043 0308 	orr.w	r3, r3, #8
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	4b6d      	ldr	r3, [pc, #436]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	496a      	ldr	r1, [pc, #424]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800258e:	4b69      	ldr	r3, [pc, #420]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	4965      	ldr	r1, [pc, #404]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d109      	bne.n	80025bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fd01 	bl	8002fb4 <RCC_SetFlashLatencyFromMSIRange>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e34d      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025bc:	f000 fc36 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b5c      	ldr	r3, [pc, #368]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	495a      	ldr	r1, [pc, #360]	; (8002738 <HAL_RCC_OscConfig+0x29c>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
 80025d8:	4a58      	ldr	r2, [pc, #352]	; (800273c <HAL_RCC_OscConfig+0x2a0>)
 80025da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025dc:	4b58      	ldr	r3, [pc, #352]	; (8002740 <HAL_RCC_OscConfig+0x2a4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fef5 	bl	80013d0 <HAL_InitTick>
 80025e6:	4603      	mov	r3, r0
 80025e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d052      	beq.n	8002696 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	e331      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d032      	beq.n	8002662 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025fc:	4b4d      	ldr	r3, [pc, #308]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a4c      	ldr	r2, [pc, #304]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002608:	f7fe ff32 	bl	8001470 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002610:	f7fe ff2e 	bl	8001470 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e31a      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002622:	4b44      	ldr	r3, [pc, #272]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800262e:	4b41      	ldr	r3, [pc, #260]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a40      	ldr	r2, [pc, #256]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 8002634:	f043 0308 	orr.w	r3, r3, #8
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	4b3e      	ldr	r3, [pc, #248]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	493b      	ldr	r1, [pc, #236]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800264c:	4b39      	ldr	r3, [pc, #228]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	021b      	lsls	r3, r3, #8
 800265a:	4936      	ldr	r1, [pc, #216]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
 8002660:	e01a      	b.n	8002698 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002662:	4b34      	ldr	r3, [pc, #208]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a33      	ldr	r2, [pc, #204]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800266e:	f7fe feff 	bl	8001470 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002676:	f7fe fefb 	bl	8001470 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e2e7      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002688:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x1da>
 8002694:	e000      	b.n	8002698 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002696:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d074      	beq.n	800278e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d005      	beq.n	80026b6 <HAL_RCC_OscConfig+0x21a>
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b0c      	cmp	r3, #12
 80026ae:	d10e      	bne.n	80026ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d10b      	bne.n	80026ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b6:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d064      	beq.n	800278c <HAL_RCC_OscConfig+0x2f0>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d160      	bne.n	800278c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e2c4      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x24a>
 80026d8:	4b16      	ldr	r3, [pc, #88]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a15      	ldr	r2, [pc, #84]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 80026de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	e01d      	b.n	8002722 <HAL_RCC_OscConfig+0x286>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ee:	d10c      	bne.n	800270a <HAL_RCC_OscConfig+0x26e>
 80026f0:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 80026f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 8002702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	e00b      	b.n	8002722 <HAL_RCC_OscConfig+0x286>
 800270a:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a09      	ldr	r2, [pc, #36]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 8002710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b07      	ldr	r3, [pc, #28]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a06      	ldr	r2, [pc, #24]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 800271c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002720:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d01c      	beq.n	8002764 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272a:	f7fe fea1 	bl	8001470 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002730:	e011      	b.n	8002756 <HAL_RCC_OscConfig+0x2ba>
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	080044d0 	.word	0x080044d0
 800273c:	20000000 	.word	0x20000000
 8002740:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7fe fe94 	bl	8001470 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e280      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002756:	4baf      	ldr	r3, [pc, #700]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0x2a8>
 8002762:	e014      	b.n	800278e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7fe fe84 	bl	8001470 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276c:	f7fe fe80 	bl	8001470 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e26c      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800277e:	4ba5      	ldr	r3, [pc, #660]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x2d0>
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d060      	beq.n	800285c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	2b04      	cmp	r3, #4
 800279e:	d005      	beq.n	80027ac <HAL_RCC_OscConfig+0x310>
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b0c      	cmp	r3, #12
 80027a4:	d119      	bne.n	80027da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d116      	bne.n	80027da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ac:	4b99      	ldr	r3, [pc, #612]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_OscConfig+0x328>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e249      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	4b93      	ldr	r3, [pc, #588]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	061b      	lsls	r3, r3, #24
 80027d2:	4990      	ldr	r1, [pc, #576]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027d8:	e040      	b.n	800285c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d023      	beq.n	800282a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e2:	4b8c      	ldr	r3, [pc, #560]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a8b      	ldr	r2, [pc, #556]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 80027e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ee:	f7fe fe3f 	bl	8001470 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f6:	f7fe fe3b 	bl	8001470 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e227      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002808:	4b82      	ldr	r3, [pc, #520]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002814:	4b7f      	ldr	r3, [pc, #508]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	497c      	ldr	r1, [pc, #496]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
 8002828:	e018      	b.n	800285c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282a:	4b7a      	ldr	r3, [pc, #488]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a79      	ldr	r2, [pc, #484]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 8002830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002836:	f7fe fe1b 	bl	8001470 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283e:	f7fe fe17 	bl	8001470 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e203      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002850:	4b70      	ldr	r3, [pc, #448]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f0      	bne.n	800283e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d03c      	beq.n	80028e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01c      	beq.n	80028aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002870:	4b68      	ldr	r3, [pc, #416]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 8002872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002876:	4a67      	ldr	r2, [pc, #412]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002880:	f7fe fdf6 	bl	8001470 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002888:	f7fe fdf2 	bl	8001470 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e1de      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800289a:	4b5e      	ldr	r3, [pc, #376]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 800289c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0ef      	beq.n	8002888 <HAL_RCC_OscConfig+0x3ec>
 80028a8:	e01b      	b.n	80028e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028aa:	4b5a      	ldr	r3, [pc, #360]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 80028ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b0:	4a58      	ldr	r2, [pc, #352]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 80028b2:	f023 0301 	bic.w	r3, r3, #1
 80028b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ba:	f7fe fdd9 	bl	8001470 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c2:	f7fe fdd5 	bl	8001470 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e1c1      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028d4:	4b4f      	ldr	r3, [pc, #316]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 80028d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1ef      	bne.n	80028c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80a6 	beq.w	8002a3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f0:	2300      	movs	r3, #0
 80028f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028f4:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10d      	bne.n	800291c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002900:	4b44      	ldr	r3, [pc, #272]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	4a43      	ldr	r2, [pc, #268]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 8002906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290a:	6593      	str	r3, [r2, #88]	; 0x58
 800290c:	4b41      	ldr	r3, [pc, #260]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002918:	2301      	movs	r3, #1
 800291a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800291c:	4b3e      	ldr	r3, [pc, #248]	; (8002a18 <HAL_RCC_OscConfig+0x57c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d118      	bne.n	800295a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002928:	4b3b      	ldr	r3, [pc, #236]	; (8002a18 <HAL_RCC_OscConfig+0x57c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a3a      	ldr	r2, [pc, #232]	; (8002a18 <HAL_RCC_OscConfig+0x57c>)
 800292e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002932:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002934:	f7fe fd9c 	bl	8001470 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293c:	f7fe fd98 	bl	8001470 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e184      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800294e:	4b32      	ldr	r3, [pc, #200]	; (8002a18 <HAL_RCC_OscConfig+0x57c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d108      	bne.n	8002974 <HAL_RCC_OscConfig+0x4d8>
 8002962:	4b2c      	ldr	r3, [pc, #176]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002968:	4a2a      	ldr	r2, [pc, #168]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002972:	e024      	b.n	80029be <HAL_RCC_OscConfig+0x522>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b05      	cmp	r3, #5
 800297a:	d110      	bne.n	800299e <HAL_RCC_OscConfig+0x502>
 800297c:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002982:	4a24      	ldr	r2, [pc, #144]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800298c:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002992:	4a20      	ldr	r2, [pc, #128]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800299c:	e00f      	b.n	80029be <HAL_RCC_OscConfig+0x522>
 800299e:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a4:	4a1b      	ldr	r2, [pc, #108]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 80029a6:	f023 0301 	bic.w	r3, r3, #1
 80029aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ae:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b4:	4a17      	ldr	r2, [pc, #92]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 80029b6:	f023 0304 	bic.w	r3, r3, #4
 80029ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d016      	beq.n	80029f4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c6:	f7fe fd53 	bl	8001470 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029cc:	e00a      	b.n	80029e4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ce:	f7fe fd4f 	bl	8001470 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e139      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_OscConfig+0x578>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0ed      	beq.n	80029ce <HAL_RCC_OscConfig+0x532>
 80029f2:	e01a      	b.n	8002a2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7fe fd3c 	bl	8001470 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029fa:	e00f      	b.n	8002a1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fc:	f7fe fd38 	bl	8001470 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d906      	bls.n	8002a1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e122      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a1c:	4b90      	ldr	r3, [pc, #576]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1e8      	bne.n	80029fc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a2a:	7ffb      	ldrb	r3, [r7, #31]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d105      	bne.n	8002a3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a30:	4b8b      	ldr	r3, [pc, #556]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a34:	4a8a      	ldr	r2, [pc, #552]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 8108 	beq.w	8002c56 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	f040 80d0 	bne.w	8002bf0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a50:	4b83      	ldr	r3, [pc, #524]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f003 0203 	and.w	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d130      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d127      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a80:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d11f      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a90:	2a07      	cmp	r2, #7
 8002a92:	bf14      	ite	ne
 8002a94:	2201      	movne	r2, #1
 8002a96:	2200      	moveq	r2, #0
 8002a98:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d113      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	085b      	lsrs	r3, r3, #1
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d109      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d06e      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b0c      	cmp	r3, #12
 8002aca:	d069      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002acc:	4b64      	ldr	r3, [pc, #400]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d105      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ad8:	4b61      	ldr	r3, [pc, #388]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0b7      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ae8:	4b5d      	ldr	r3, [pc, #372]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a5c      	ldr	r2, [pc, #368]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002af2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002af4:	f7fe fcbc 	bl	8001470 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afc:	f7fe fcb8 	bl	8001470 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e0a4      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0e:	4b54      	ldr	r3, [pc, #336]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b1a:	4b51      	ldr	r3, [pc, #324]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	4b51      	ldr	r3, [pc, #324]	; (8002c64 <HAL_RCC_OscConfig+0x7c8>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b2a:	3a01      	subs	r2, #1
 8002b2c:	0112      	lsls	r2, r2, #4
 8002b2e:	4311      	orrs	r1, r2
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b34:	0212      	lsls	r2, r2, #8
 8002b36:	4311      	orrs	r1, r2
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b3c:	0852      	lsrs	r2, r2, #1
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	0552      	lsls	r2, r2, #21
 8002b42:	4311      	orrs	r1, r2
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b48:	0852      	lsrs	r2, r2, #1
 8002b4a:	3a01      	subs	r2, #1
 8002b4c:	0652      	lsls	r2, r2, #25
 8002b4e:	4311      	orrs	r1, r2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b54:	0912      	lsrs	r2, r2, #4
 8002b56:	0452      	lsls	r2, r2, #17
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	4941      	ldr	r1, [pc, #260]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b60:	4b3f      	ldr	r3, [pc, #252]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a3e      	ldr	r2, [pc, #248]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b6c:	4b3c      	ldr	r3, [pc, #240]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4a3b      	ldr	r2, [pc, #236]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b78:	f7fe fc7a 	bl	8001470 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe fc76 	bl	8001470 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e062      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b92:	4b33      	ldr	r3, [pc, #204]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b9e:	e05a      	b.n	8002c56 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e059      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba4:	4b2e      	ldr	r3, [pc, #184]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d152      	bne.n	8002c56 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bb0:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a2a      	ldr	r2, [pc, #168]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bbc:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4a27      	ldr	r2, [pc, #156]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bc8:	f7fe fc52 	bl	8001470 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd0:	f7fe fc4e 	bl	8001470 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e03a      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be2:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x734>
 8002bee:	e032      	b.n	8002c56 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	2b0c      	cmp	r3, #12
 8002bf4:	d02d      	beq.n	8002c52 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf6:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a19      	ldr	r2, [pc, #100]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002bfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c00:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c02:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d105      	bne.n	8002c1a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c0e:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002c14:	f023 0303 	bic.w	r3, r3, #3
 8002c18:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c1a:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	4a10      	ldr	r2, [pc, #64]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002c20:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c28:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7fe fc21 	bl	8001470 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c32:	f7fe fc1d 	bl	8001470 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e009      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_RCC_OscConfig+0x7c4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x796>
 8002c50:	e001      	b.n	8002c56 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000
 8002c64:	f99d808c 	.word	0xf99d808c

08002c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0c8      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b66      	ldr	r3, [pc, #408]	; (8002e18 <HAL_RCC_ClockConfig+0x1b0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d910      	bls.n	8002cac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	4b63      	ldr	r3, [pc, #396]	; (8002e18 <HAL_RCC_ClockConfig+0x1b0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 0207 	bic.w	r2, r3, #7
 8002c92:	4961      	ldr	r1, [pc, #388]	; (8002e18 <HAL_RCC_ClockConfig+0x1b0>)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b5f      	ldr	r3, [pc, #380]	; (8002e18 <HAL_RCC_ClockConfig+0x1b0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0b0      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d04c      	beq.n	8002d52 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc0:	4b56      	ldr	r3, [pc, #344]	; (8002e1c <HAL_RCC_ClockConfig+0x1b4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d121      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e09e      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d107      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd8:	4b50      	ldr	r3, [pc, #320]	; (8002e1c <HAL_RCC_ClockConfig+0x1b4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d115      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e092      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d107      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cf0:	4b4a      	ldr	r3, [pc, #296]	; (8002e1c <HAL_RCC_ClockConfig+0x1b4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d109      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e086      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d00:	4b46      	ldr	r3, [pc, #280]	; (8002e1c <HAL_RCC_ClockConfig+0x1b4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e07e      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d10:	4b42      	ldr	r3, [pc, #264]	; (8002e1c <HAL_RCC_ClockConfig+0x1b4>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f023 0203 	bic.w	r2, r3, #3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	493f      	ldr	r1, [pc, #252]	; (8002e1c <HAL_RCC_ClockConfig+0x1b4>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d22:	f7fe fba5 	bl	8001470 <HAL_GetTick>
 8002d26:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2a:	f7fe fba1 	bl	8001470 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e066      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d40:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <HAL_RCC_ClockConfig+0x1b4>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 020c 	and.w	r2, r3, #12
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d1eb      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5e:	4b2f      	ldr	r3, [pc, #188]	; (8002e1c <HAL_RCC_ClockConfig+0x1b4>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	492c      	ldr	r1, [pc, #176]	; (8002e1c <HAL_RCC_ClockConfig+0x1b4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d70:	4b29      	ldr	r3, [pc, #164]	; (8002e18 <HAL_RCC_ClockConfig+0x1b0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d210      	bcs.n	8002da0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <HAL_RCC_ClockConfig+0x1b0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 0207 	bic.w	r2, r3, #7
 8002d86:	4924      	ldr	r1, [pc, #144]	; (8002e18 <HAL_RCC_ClockConfig+0x1b0>)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b22      	ldr	r3, [pc, #136]	; (8002e18 <HAL_RCC_ClockConfig+0x1b0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e036      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <HAL_RCC_ClockConfig+0x1b4>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	4918      	ldr	r1, [pc, #96]	; (8002e1c <HAL_RCC_ClockConfig+0x1b4>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d009      	beq.n	8002dde <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dca:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <HAL_RCC_ClockConfig+0x1b4>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4910      	ldr	r1, [pc, #64]	; (8002e1c <HAL_RCC_ClockConfig+0x1b4>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dde:	f000 f825 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 8002de2:	4602      	mov	r2, r0
 8002de4:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <HAL_RCC_ClockConfig+0x1b4>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	490c      	ldr	r1, [pc, #48]	; (8002e20 <HAL_RCC_ClockConfig+0x1b8>)
 8002df0:	5ccb      	ldrb	r3, [r1, r3]
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfa:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe fae4 	bl	80013d0 <HAL_InitTick>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e0c:	7afb      	ldrb	r3, [r7, #11]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40022000 	.word	0x40022000
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	080044d0 	.word	0x080044d0
 8002e24:	20000000 	.word	0x20000000
 8002e28:	20000004 	.word	0x20000004

08002e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e3a:	4b3e      	ldr	r3, [pc, #248]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e44:	4b3b      	ldr	r3, [pc, #236]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x34>
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	2b0c      	cmp	r3, #12
 8002e58:	d121      	bne.n	8002e9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d11e      	bne.n	8002e9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e60:	4b34      	ldr	r3, [pc, #208]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e6c:	4b31      	ldr	r3, [pc, #196]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e72:	0a1b      	lsrs	r3, r3, #8
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	e005      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e88:	4a2b      	ldr	r2, [pc, #172]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10d      	bne.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d102      	bne.n	8002eaa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ea4:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ea6:	61bb      	str	r3, [r7, #24]
 8002ea8:	e004      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002eb0:	4b23      	ldr	r3, [pc, #140]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b0c      	cmp	r3, #12
 8002eb8:	d134      	bne.n	8002f24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002eba:	4b1e      	ldr	r3, [pc, #120]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d003      	beq.n	8002ed2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d003      	beq.n	8002ed8 <HAL_RCC_GetSysClockFreq+0xac>
 8002ed0:	e005      	b.n	8002ede <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ed2:	4b1a      	ldr	r3, [pc, #104]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ed4:	617b      	str	r3, [r7, #20]
      break;
 8002ed6:	e005      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ed8:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eda:	617b      	str	r3, [r7, #20]
      break;
 8002edc:	e002      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	617b      	str	r3, [r7, #20]
      break;
 8002ee2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ee4:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	3301      	adds	r3, #1
 8002ef0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ef2:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	0a1b      	lsrs	r3, r3, #8
 8002ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	fb02 f203 	mul.w	r2, r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	0e5b      	lsrs	r3, r3, #25
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	3301      	adds	r3, #1
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f24:	69bb      	ldr	r3, [r7, #24]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3724      	adds	r7, #36	; 0x24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
 8002f38:	080044e8 	.word	0x080044e8
 8002f3c:	00f42400 	.word	0x00f42400
 8002f40:	007a1200 	.word	0x007a1200

08002f44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f48:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	20000000 	.word	0x20000000

08002f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f60:	f7ff fff0 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f64:	4602      	mov	r2, r0
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	4904      	ldr	r1, [pc, #16]	; (8002f84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f72:	5ccb      	ldrb	r3, [r1, r3]
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40021000 	.word	0x40021000
 8002f84:	080044e0 	.word	0x080044e0

08002f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f8c:	f7ff ffda 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	0adb      	lsrs	r3, r3, #11
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4904      	ldr	r1, [pc, #16]	; (8002fb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	080044e0 	.word	0x080044e0

08002fb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fc0:	4b2a      	ldr	r3, [pc, #168]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fcc:	f7ff fa02 	bl	80023d4 <HAL_PWREx_GetVoltageRange>
 8002fd0:	6178      	str	r0, [r7, #20]
 8002fd2:	e014      	b.n	8002ffe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fd4:	4b25      	ldr	r3, [pc, #148]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	4a24      	ldr	r2, [pc, #144]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fde:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe0:	4b22      	ldr	r3, [pc, #136]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fec:	f7ff f9f2 	bl	80023d4 <HAL_PWREx_GetVoltageRange>
 8002ff0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ff2:	4b1e      	ldr	r3, [pc, #120]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff6:	4a1d      	ldr	r2, [pc, #116]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003004:	d10b      	bne.n	800301e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b80      	cmp	r3, #128	; 0x80
 800300a:	d919      	bls.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2ba0      	cmp	r3, #160	; 0xa0
 8003010:	d902      	bls.n	8003018 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003012:	2302      	movs	r3, #2
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	e013      	b.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003018:	2301      	movs	r3, #1
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	e010      	b.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b80      	cmp	r3, #128	; 0x80
 8003022:	d902      	bls.n	800302a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003024:	2303      	movs	r3, #3
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	e00a      	b.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b80      	cmp	r3, #128	; 0x80
 800302e:	d102      	bne.n	8003036 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003030:	2302      	movs	r3, #2
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	e004      	b.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b70      	cmp	r3, #112	; 0x70
 800303a:	d101      	bne.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800303c:	2301      	movs	r3, #1
 800303e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f023 0207 	bic.w	r2, r3, #7
 8003048:	4909      	ldr	r1, [pc, #36]	; (8003070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	429a      	cmp	r2, r3
 800305c:	d001      	beq.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40021000 	.word	0x40021000
 8003070:	40022000 	.word	0x40022000

08003074 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800307c:	2300      	movs	r3, #0
 800307e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003080:	2300      	movs	r3, #0
 8003082:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800308c:	2b00      	cmp	r3, #0
 800308e:	d041      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003094:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003098:	d02a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800309a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800309e:	d824      	bhi.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030a4:	d008      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030aa:	d81e      	bhi.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b4:	d010      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030b6:	e018      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030b8:	4b86      	ldr	r3, [pc, #536]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4a85      	ldr	r2, [pc, #532]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030c4:	e015      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3304      	adds	r3, #4
 80030ca:	2100      	movs	r1, #0
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fabb 	bl	8003648 <RCCEx_PLLSAI1_Config>
 80030d2:	4603      	mov	r3, r0
 80030d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030d6:	e00c      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3320      	adds	r3, #32
 80030dc:	2100      	movs	r1, #0
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fba6 	bl	8003830 <RCCEx_PLLSAI2_Config>
 80030e4:	4603      	mov	r3, r0
 80030e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030e8:	e003      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	74fb      	strb	r3, [r7, #19]
      break;
 80030ee:	e000      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030f2:	7cfb      	ldrb	r3, [r7, #19]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10b      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030f8:	4b76      	ldr	r3, [pc, #472]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003106:	4973      	ldr	r1, [pc, #460]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800310e:	e001      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003110:	7cfb      	ldrb	r3, [r7, #19]
 8003112:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d041      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003124:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003128:	d02a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800312a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800312e:	d824      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003134:	d008      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003136:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800313a:	d81e      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003144:	d010      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003146:	e018      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003148:	4b62      	ldr	r3, [pc, #392]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4a61      	ldr	r2, [pc, #388]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003152:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003154:	e015      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3304      	adds	r3, #4
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fa73 	bl	8003648 <RCCEx_PLLSAI1_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003166:	e00c      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3320      	adds	r3, #32
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fb5e 	bl	8003830 <RCCEx_PLLSAI2_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003178:	e003      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	74fb      	strb	r3, [r7, #19]
      break;
 800317e:	e000      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003182:	7cfb      	ldrb	r3, [r7, #19]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10b      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003188:	4b52      	ldr	r3, [pc, #328]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003196:	494f      	ldr	r1, [pc, #316]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800319e:	e001      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80a0 	beq.w	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031c6:	2300      	movs	r3, #0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00d      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031cc:	4b41      	ldr	r3, [pc, #260]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d0:	4a40      	ldr	r2, [pc, #256]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d6:	6593      	str	r3, [r2, #88]	; 0x58
 80031d8:	4b3e      	ldr	r3, [pc, #248]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e4:	2301      	movs	r3, #1
 80031e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031e8:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a3a      	ldr	r2, [pc, #232]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031f4:	f7fe f93c 	bl	8001470 <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031fa:	e009      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fc:	f7fe f938 	bl	8001470 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d902      	bls.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	74fb      	strb	r3, [r7, #19]
        break;
 800320e:	e005      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003210:	4b31      	ldr	r3, [pc, #196]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0ef      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800321c:	7cfb      	ldrb	r3, [r7, #19]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d15c      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003222:	4b2c      	ldr	r3, [pc, #176]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d01f      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	429a      	cmp	r2, r3
 800323e:	d019      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003240:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800324c:	4b21      	ldr	r3, [pc, #132]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	4a20      	ldr	r2, [pc, #128]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800325c:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800326c:	4a19      	ldr	r2, [pc, #100]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d016      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327e:	f7fe f8f7 	bl	8001470 <HAL_GetTick>
 8003282:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003284:	e00b      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003286:	f7fe f8f3 	bl	8001470 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f241 3288 	movw	r2, #5000	; 0x1388
 8003294:	4293      	cmp	r3, r2
 8003296:	d902      	bls.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	74fb      	strb	r3, [r7, #19]
            break;
 800329c:	e006      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800329e:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ec      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10c      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c2:	4904      	ldr	r1, [pc, #16]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032ca:	e009      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	74bb      	strb	r3, [r7, #18]
 80032d0:	e006      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032d2:	bf00      	nop
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032dc:	7cfb      	ldrb	r3, [r7, #19]
 80032de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032e0:	7c7b      	ldrb	r3, [r7, #17]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d105      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e6:	4b9e      	ldr	r3, [pc, #632]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	4a9d      	ldr	r2, [pc, #628]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032fe:	4b98      	ldr	r3, [pc, #608]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003304:	f023 0203 	bic.w	r2, r3, #3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	4994      	ldr	r1, [pc, #592]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003320:	4b8f      	ldr	r3, [pc, #572]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003326:	f023 020c 	bic.w	r2, r3, #12
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	498c      	ldr	r1, [pc, #560]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003342:	4b87      	ldr	r3, [pc, #540]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003348:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	4983      	ldr	r1, [pc, #524]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003364:	4b7e      	ldr	r3, [pc, #504]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	497b      	ldr	r1, [pc, #492]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003386:	4b76      	ldr	r3, [pc, #472]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003394:	4972      	ldr	r1, [pc, #456]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033a8:	4b6d      	ldr	r3, [pc, #436]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b6:	496a      	ldr	r1, [pc, #424]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033ca:	4b65      	ldr	r3, [pc, #404]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	4961      	ldr	r1, [pc, #388]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00a      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033ec:	4b5c      	ldr	r3, [pc, #368]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fa:	4959      	ldr	r1, [pc, #356]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800340e:	4b54      	ldr	r3, [pc, #336]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003414:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341c:	4950      	ldr	r1, [pc, #320]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00a      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003430:	4b4b      	ldr	r3, [pc, #300]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003436:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	4948      	ldr	r1, [pc, #288]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003452:	4b43      	ldr	r3, [pc, #268]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	493f      	ldr	r1, [pc, #252]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d028      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003474:	4b3a      	ldr	r3, [pc, #232]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003482:	4937      	ldr	r1, [pc, #220]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800348e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003492:	d106      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003494:	4b32      	ldr	r3, [pc, #200]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4a31      	ldr	r2, [pc, #196]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800349e:	60d3      	str	r3, [r2, #12]
 80034a0:	e011      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034aa:	d10c      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	2101      	movs	r1, #1
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f8c8 	bl	8003648 <RCCEx_PLLSAI1_Config>
 80034b8:	4603      	mov	r3, r0
 80034ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034bc:	7cfb      	ldrb	r3, [r7, #19]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80034c2:	7cfb      	ldrb	r3, [r7, #19]
 80034c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d028      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034d2:	4b23      	ldr	r3, [pc, #140]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	491f      	ldr	r1, [pc, #124]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f0:	d106      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034f2:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	4a1a      	ldr	r2, [pc, #104]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034fc:	60d3      	str	r3, [r2, #12]
 80034fe:	e011      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003504:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003508:	d10c      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	2101      	movs	r1, #1
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f899 	bl	8003648 <RCCEx_PLLSAI1_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d02b      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353e:	4908      	ldr	r1, [pc, #32]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800354e:	d109      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a02      	ldr	r2, [pc, #8]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800355a:	60d3      	str	r3, [r2, #12]
 800355c:	e014      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800355e:	bf00      	nop
 8003560:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003568:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800356c:	d10c      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3304      	adds	r3, #4
 8003572:	2101      	movs	r1, #1
 8003574:	4618      	mov	r0, r3
 8003576:	f000 f867 	bl	8003648 <RCCEx_PLLSAI1_Config>
 800357a:	4603      	mov	r3, r0
 800357c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800357e:	7cfb      	ldrb	r3, [r7, #19]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d02f      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003594:	4b2b      	ldr	r3, [pc, #172]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a2:	4928      	ldr	r1, [pc, #160]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035b2:	d10d      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3304      	adds	r3, #4
 80035b8:	2102      	movs	r1, #2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f844 	bl	8003648 <RCCEx_PLLSAI1_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d014      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035ca:	7cfb      	ldrb	r3, [r7, #19]
 80035cc:	74bb      	strb	r3, [r7, #18]
 80035ce:	e011      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3320      	adds	r3, #32
 80035de:	2102      	movs	r1, #2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 f925 	bl	8003830 <RCCEx_PLLSAI2_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ea:	7cfb      	ldrb	r3, [r7, #19]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035f0:	7cfb      	ldrb	r3, [r7, #19]
 80035f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003600:	4b10      	ldr	r3, [pc, #64]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800360e:	490d      	ldr	r1, [pc, #52]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00b      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003622:	4b08      	ldr	r3, [pc, #32]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003628:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003632:	4904      	ldr	r1, [pc, #16]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800363a:	7cbb      	ldrb	r3, [r7, #18]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40021000 	.word	0x40021000

08003648 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003656:	4b75      	ldr	r3, [pc, #468]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d018      	beq.n	8003694 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003662:	4b72      	ldr	r3, [pc, #456]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0203 	and.w	r2, r3, #3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d10d      	bne.n	800368e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
       ||
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800367a:	4b6c      	ldr	r3, [pc, #432]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
       ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d047      	beq.n	800371e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
 8003692:	e044      	b.n	800371e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b03      	cmp	r3, #3
 800369a:	d018      	beq.n	80036ce <RCCEx_PLLSAI1_Config+0x86>
 800369c:	2b03      	cmp	r3, #3
 800369e:	d825      	bhi.n	80036ec <RCCEx_PLLSAI1_Config+0xa4>
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d002      	beq.n	80036aa <RCCEx_PLLSAI1_Config+0x62>
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d009      	beq.n	80036bc <RCCEx_PLLSAI1_Config+0x74>
 80036a8:	e020      	b.n	80036ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036aa:	4b60      	ldr	r3, [pc, #384]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d11d      	bne.n	80036f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ba:	e01a      	b.n	80036f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036bc:	4b5b      	ldr	r3, [pc, #364]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d116      	bne.n	80036f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036cc:	e013      	b.n	80036f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ce:	4b57      	ldr	r3, [pc, #348]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10f      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036da:	4b54      	ldr	r3, [pc, #336]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036ea:	e006      	b.n	80036fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
      break;
 80036f0:	e004      	b.n	80036fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036f2:	bf00      	nop
 80036f4:	e002      	b.n	80036fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036f6:	bf00      	nop
 80036f8:	e000      	b.n	80036fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10d      	bne.n	800371e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003702:	4b4a      	ldr	r3, [pc, #296]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6819      	ldr	r1, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	3b01      	subs	r3, #1
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	430b      	orrs	r3, r1
 8003718:	4944      	ldr	r1, [pc, #272]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 800371a:	4313      	orrs	r3, r2
 800371c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d17d      	bne.n	8003820 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003724:	4b41      	ldr	r3, [pc, #260]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a40      	ldr	r2, [pc, #256]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 800372a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800372e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003730:	f7fd fe9e 	bl	8001470 <HAL_GetTick>
 8003734:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003736:	e009      	b.n	800374c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003738:	f7fd fe9a 	bl	8001470 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d902      	bls.n	800374c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	73fb      	strb	r3, [r7, #15]
        break;
 800374a:	e005      	b.n	8003758 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800374c:	4b37      	ldr	r3, [pc, #220]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1ef      	bne.n	8003738 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d160      	bne.n	8003820 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d111      	bne.n	8003788 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003764:	4b31      	ldr	r3, [pc, #196]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800376c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6892      	ldr	r2, [r2, #8]
 8003774:	0211      	lsls	r1, r2, #8
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68d2      	ldr	r2, [r2, #12]
 800377a:	0912      	lsrs	r2, r2, #4
 800377c:	0452      	lsls	r2, r2, #17
 800377e:	430a      	orrs	r2, r1
 8003780:	492a      	ldr	r1, [pc, #168]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003782:	4313      	orrs	r3, r2
 8003784:	610b      	str	r3, [r1, #16]
 8003786:	e027      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d112      	bne.n	80037b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800378e:	4b27      	ldr	r3, [pc, #156]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003796:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6892      	ldr	r2, [r2, #8]
 800379e:	0211      	lsls	r1, r2, #8
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6912      	ldr	r2, [r2, #16]
 80037a4:	0852      	lsrs	r2, r2, #1
 80037a6:	3a01      	subs	r2, #1
 80037a8:	0552      	lsls	r2, r2, #21
 80037aa:	430a      	orrs	r2, r1
 80037ac:	491f      	ldr	r1, [pc, #124]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	610b      	str	r3, [r1, #16]
 80037b2:	e011      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b4:	4b1d      	ldr	r3, [pc, #116]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6892      	ldr	r2, [r2, #8]
 80037c4:	0211      	lsls	r1, r2, #8
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6952      	ldr	r2, [r2, #20]
 80037ca:	0852      	lsrs	r2, r2, #1
 80037cc:	3a01      	subs	r2, #1
 80037ce:	0652      	lsls	r2, r2, #25
 80037d0:	430a      	orrs	r2, r1
 80037d2:	4916      	ldr	r1, [pc, #88]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037d8:	4b14      	ldr	r3, [pc, #80]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a13      	ldr	r2, [pc, #76]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e4:	f7fd fe44 	bl	8001470 <HAL_GetTick>
 80037e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037ea:	e009      	b.n	8003800 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037ec:	f7fd fe40 	bl	8001470 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d902      	bls.n	8003800 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	73fb      	strb	r3, [r7, #15]
          break;
 80037fe:	e005      	b.n	800380c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003800:	4b0a      	ldr	r3, [pc, #40]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ef      	beq.n	80037ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	4904      	ldr	r1, [pc, #16]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 800381c:	4313      	orrs	r3, r2
 800381e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000

08003830 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800383e:	4b6a      	ldr	r3, [pc, #424]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d018      	beq.n	800387c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800384a:	4b67      	ldr	r3, [pc, #412]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0203 	and.w	r2, r3, #3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d10d      	bne.n	8003876 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
       ||
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003862:	4b61      	ldr	r3, [pc, #388]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
       ||
 8003872:	429a      	cmp	r2, r3
 8003874:	d047      	beq.n	8003906 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	e044      	b.n	8003906 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d018      	beq.n	80038b6 <RCCEx_PLLSAI2_Config+0x86>
 8003884:	2b03      	cmp	r3, #3
 8003886:	d825      	bhi.n	80038d4 <RCCEx_PLLSAI2_Config+0xa4>
 8003888:	2b01      	cmp	r3, #1
 800388a:	d002      	beq.n	8003892 <RCCEx_PLLSAI2_Config+0x62>
 800388c:	2b02      	cmp	r3, #2
 800388e:	d009      	beq.n	80038a4 <RCCEx_PLLSAI2_Config+0x74>
 8003890:	e020      	b.n	80038d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003892:	4b55      	ldr	r3, [pc, #340]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11d      	bne.n	80038da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a2:	e01a      	b.n	80038da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038a4:	4b50      	ldr	r3, [pc, #320]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d116      	bne.n	80038de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b4:	e013      	b.n	80038de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038b6:	4b4c      	ldr	r3, [pc, #304]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10f      	bne.n	80038e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038c2:	4b49      	ldr	r3, [pc, #292]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038d2:	e006      	b.n	80038e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
      break;
 80038d8:	e004      	b.n	80038e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038da:	bf00      	nop
 80038dc:	e002      	b.n	80038e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038de:	bf00      	nop
 80038e0:	e000      	b.n	80038e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10d      	bne.n	8003906 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038ea:	4b3f      	ldr	r3, [pc, #252]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6819      	ldr	r1, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	430b      	orrs	r3, r1
 8003900:	4939      	ldr	r1, [pc, #228]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003902:	4313      	orrs	r3, r2
 8003904:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d167      	bne.n	80039dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800390c:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a35      	ldr	r2, [pc, #212]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003918:	f7fd fdaa 	bl	8001470 <HAL_GetTick>
 800391c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800391e:	e009      	b.n	8003934 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003920:	f7fd fda6 	bl	8001470 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d902      	bls.n	8003934 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	73fb      	strb	r3, [r7, #15]
        break;
 8003932:	e005      	b.n	8003940 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003934:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1ef      	bne.n	8003920 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d14a      	bne.n	80039dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d111      	bne.n	8003970 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800394c:	4b26      	ldr	r3, [pc, #152]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6892      	ldr	r2, [r2, #8]
 800395c:	0211      	lsls	r1, r2, #8
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68d2      	ldr	r2, [r2, #12]
 8003962:	0912      	lsrs	r2, r2, #4
 8003964:	0452      	lsls	r2, r2, #17
 8003966:	430a      	orrs	r2, r1
 8003968:	491f      	ldr	r1, [pc, #124]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396a:	4313      	orrs	r3, r2
 800396c:	614b      	str	r3, [r1, #20]
 800396e:	e011      	b.n	8003994 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003970:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003978:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6892      	ldr	r2, [r2, #8]
 8003980:	0211      	lsls	r1, r2, #8
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6912      	ldr	r2, [r2, #16]
 8003986:	0852      	lsrs	r2, r2, #1
 8003988:	3a01      	subs	r2, #1
 800398a:	0652      	lsls	r2, r2, #25
 800398c:	430a      	orrs	r2, r1
 800398e:	4916      	ldr	r1, [pc, #88]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003990:	4313      	orrs	r3, r2
 8003992:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003994:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a13      	ldr	r2, [pc, #76]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fd fd66 	bl	8001470 <HAL_GetTick>
 80039a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039a6:	e009      	b.n	80039bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039a8:	f7fd fd62 	bl	8001470 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d902      	bls.n	80039bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	73fb      	strb	r3, [r7, #15]
          break;
 80039ba:	e005      	b.n	80039c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ef      	beq.n	80039a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039ce:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	4904      	ldr	r1, [pc, #16]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000

080039ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e040      	b.n	8003a80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fd fbe4 	bl	80011dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2224      	movs	r2, #36	; 0x24
 8003a18:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0201 	bic.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8c0 	bl	8003bb0 <UART_SetConfig>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e022      	b.n	8003a80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fb3e 	bl	80040c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fbc5 	bl	8004208 <UART_CheckIdleState>
 8003a7e:	4603      	mov	r3, r0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	; 0x28
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	f040 8082 	bne.w	8003ba6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_UART_Transmit+0x26>
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e07a      	b.n	8003ba8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_UART_Transmit+0x38>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e073      	b.n	8003ba8 <HAL_UART_Transmit+0x120>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2221      	movs	r2, #33	; 0x21
 8003ad4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ad6:	f7fd fccb 	bl	8001470 <HAL_GetTick>
 8003ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	88fa      	ldrh	r2, [r7, #6]
 8003ae8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af4:	d108      	bne.n	8003b08 <HAL_UART_Transmit+0x80>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e003      	b.n	8003b10 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b18:	e02d      	b.n	8003b76 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2200      	movs	r2, #0
 8003b22:	2180      	movs	r1, #128	; 0x80
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fbb8 	bl	800429a <UART_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e039      	b.n	8003ba8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	881a      	ldrh	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b46:	b292      	uxth	r2, r2
 8003b48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	e008      	b.n	8003b64 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	b292      	uxth	r2, r2
 8003b5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	3301      	adds	r3, #1
 8003b62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1cb      	bne.n	8003b1a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2140      	movs	r1, #64	; 0x40
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fb84 	bl	800429a <UART_WaitOnFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e005      	b.n	8003ba8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e000      	b.n	8003ba8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003ba6:	2302      	movs	r3, #2
  }
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb0:	b5b0      	push	{r4, r5, r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4bad      	ldr	r3, [pc, #692]	; (8003e90 <UART_SetConfig+0x2e0>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6812      	ldr	r2, [r2, #0]
 8003be2:	69f9      	ldr	r1, [r7, #28]
 8003be4:	430b      	orrs	r3, r1
 8003be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4aa2      	ldr	r2, [pc, #648]	; (8003e94 <UART_SetConfig+0x2e4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d004      	beq.n	8003c18 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	69fa      	ldr	r2, [r7, #28]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a99      	ldr	r2, [pc, #612]	; (8003e98 <UART_SetConfig+0x2e8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d121      	bne.n	8003c7a <UART_SetConfig+0xca>
 8003c36:	4b99      	ldr	r3, [pc, #612]	; (8003e9c <UART_SetConfig+0x2ec>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d817      	bhi.n	8003c74 <UART_SetConfig+0xc4>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <UART_SetConfig+0x9c>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c5d 	.word	0x08003c5d
 8003c50:	08003c69 	.word	0x08003c69
 8003c54:	08003c63 	.word	0x08003c63
 8003c58:	08003c6f 	.word	0x08003c6f
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	76fb      	strb	r3, [r7, #27]
 8003c60:	e0e7      	b.n	8003e32 <UART_SetConfig+0x282>
 8003c62:	2302      	movs	r3, #2
 8003c64:	76fb      	strb	r3, [r7, #27]
 8003c66:	e0e4      	b.n	8003e32 <UART_SetConfig+0x282>
 8003c68:	2304      	movs	r3, #4
 8003c6a:	76fb      	strb	r3, [r7, #27]
 8003c6c:	e0e1      	b.n	8003e32 <UART_SetConfig+0x282>
 8003c6e:	2308      	movs	r3, #8
 8003c70:	76fb      	strb	r3, [r7, #27]
 8003c72:	e0de      	b.n	8003e32 <UART_SetConfig+0x282>
 8003c74:	2310      	movs	r3, #16
 8003c76:	76fb      	strb	r3, [r7, #27]
 8003c78:	e0db      	b.n	8003e32 <UART_SetConfig+0x282>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a88      	ldr	r2, [pc, #544]	; (8003ea0 <UART_SetConfig+0x2f0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d132      	bne.n	8003cea <UART_SetConfig+0x13a>
 8003c84:	4b85      	ldr	r3, [pc, #532]	; (8003e9c <UART_SetConfig+0x2ec>)
 8003c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	2b0c      	cmp	r3, #12
 8003c90:	d828      	bhi.n	8003ce4 <UART_SetConfig+0x134>
 8003c92:	a201      	add	r2, pc, #4	; (adr r2, 8003c98 <UART_SetConfig+0xe8>)
 8003c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c98:	08003ccd 	.word	0x08003ccd
 8003c9c:	08003ce5 	.word	0x08003ce5
 8003ca0:	08003ce5 	.word	0x08003ce5
 8003ca4:	08003ce5 	.word	0x08003ce5
 8003ca8:	08003cd9 	.word	0x08003cd9
 8003cac:	08003ce5 	.word	0x08003ce5
 8003cb0:	08003ce5 	.word	0x08003ce5
 8003cb4:	08003ce5 	.word	0x08003ce5
 8003cb8:	08003cd3 	.word	0x08003cd3
 8003cbc:	08003ce5 	.word	0x08003ce5
 8003cc0:	08003ce5 	.word	0x08003ce5
 8003cc4:	08003ce5 	.word	0x08003ce5
 8003cc8:	08003cdf 	.word	0x08003cdf
 8003ccc:	2300      	movs	r3, #0
 8003cce:	76fb      	strb	r3, [r7, #27]
 8003cd0:	e0af      	b.n	8003e32 <UART_SetConfig+0x282>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	76fb      	strb	r3, [r7, #27]
 8003cd6:	e0ac      	b.n	8003e32 <UART_SetConfig+0x282>
 8003cd8:	2304      	movs	r3, #4
 8003cda:	76fb      	strb	r3, [r7, #27]
 8003cdc:	e0a9      	b.n	8003e32 <UART_SetConfig+0x282>
 8003cde:	2308      	movs	r3, #8
 8003ce0:	76fb      	strb	r3, [r7, #27]
 8003ce2:	e0a6      	b.n	8003e32 <UART_SetConfig+0x282>
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	76fb      	strb	r3, [r7, #27]
 8003ce8:	e0a3      	b.n	8003e32 <UART_SetConfig+0x282>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a6d      	ldr	r2, [pc, #436]	; (8003ea4 <UART_SetConfig+0x2f4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d120      	bne.n	8003d36 <UART_SetConfig+0x186>
 8003cf4:	4b69      	ldr	r3, [pc, #420]	; (8003e9c <UART_SetConfig+0x2ec>)
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cfe:	2b30      	cmp	r3, #48	; 0x30
 8003d00:	d013      	beq.n	8003d2a <UART_SetConfig+0x17a>
 8003d02:	2b30      	cmp	r3, #48	; 0x30
 8003d04:	d814      	bhi.n	8003d30 <UART_SetConfig+0x180>
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d009      	beq.n	8003d1e <UART_SetConfig+0x16e>
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d810      	bhi.n	8003d30 <UART_SetConfig+0x180>
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <UART_SetConfig+0x168>
 8003d12:	2b10      	cmp	r3, #16
 8003d14:	d006      	beq.n	8003d24 <UART_SetConfig+0x174>
 8003d16:	e00b      	b.n	8003d30 <UART_SetConfig+0x180>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	76fb      	strb	r3, [r7, #27]
 8003d1c:	e089      	b.n	8003e32 <UART_SetConfig+0x282>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	76fb      	strb	r3, [r7, #27]
 8003d22:	e086      	b.n	8003e32 <UART_SetConfig+0x282>
 8003d24:	2304      	movs	r3, #4
 8003d26:	76fb      	strb	r3, [r7, #27]
 8003d28:	e083      	b.n	8003e32 <UART_SetConfig+0x282>
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	76fb      	strb	r3, [r7, #27]
 8003d2e:	e080      	b.n	8003e32 <UART_SetConfig+0x282>
 8003d30:	2310      	movs	r3, #16
 8003d32:	76fb      	strb	r3, [r7, #27]
 8003d34:	e07d      	b.n	8003e32 <UART_SetConfig+0x282>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a5b      	ldr	r2, [pc, #364]	; (8003ea8 <UART_SetConfig+0x2f8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d120      	bne.n	8003d82 <UART_SetConfig+0x1d2>
 8003d40:	4b56      	ldr	r3, [pc, #344]	; (8003e9c <UART_SetConfig+0x2ec>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d4a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d4c:	d013      	beq.n	8003d76 <UART_SetConfig+0x1c6>
 8003d4e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d50:	d814      	bhi.n	8003d7c <UART_SetConfig+0x1cc>
 8003d52:	2b80      	cmp	r3, #128	; 0x80
 8003d54:	d009      	beq.n	8003d6a <UART_SetConfig+0x1ba>
 8003d56:	2b80      	cmp	r3, #128	; 0x80
 8003d58:	d810      	bhi.n	8003d7c <UART_SetConfig+0x1cc>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <UART_SetConfig+0x1b4>
 8003d5e:	2b40      	cmp	r3, #64	; 0x40
 8003d60:	d006      	beq.n	8003d70 <UART_SetConfig+0x1c0>
 8003d62:	e00b      	b.n	8003d7c <UART_SetConfig+0x1cc>
 8003d64:	2300      	movs	r3, #0
 8003d66:	76fb      	strb	r3, [r7, #27]
 8003d68:	e063      	b.n	8003e32 <UART_SetConfig+0x282>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	76fb      	strb	r3, [r7, #27]
 8003d6e:	e060      	b.n	8003e32 <UART_SetConfig+0x282>
 8003d70:	2304      	movs	r3, #4
 8003d72:	76fb      	strb	r3, [r7, #27]
 8003d74:	e05d      	b.n	8003e32 <UART_SetConfig+0x282>
 8003d76:	2308      	movs	r3, #8
 8003d78:	76fb      	strb	r3, [r7, #27]
 8003d7a:	e05a      	b.n	8003e32 <UART_SetConfig+0x282>
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	76fb      	strb	r3, [r7, #27]
 8003d80:	e057      	b.n	8003e32 <UART_SetConfig+0x282>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a49      	ldr	r2, [pc, #292]	; (8003eac <UART_SetConfig+0x2fc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d125      	bne.n	8003dd8 <UART_SetConfig+0x228>
 8003d8c:	4b43      	ldr	r3, [pc, #268]	; (8003e9c <UART_SetConfig+0x2ec>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d9a:	d017      	beq.n	8003dcc <UART_SetConfig+0x21c>
 8003d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003da0:	d817      	bhi.n	8003dd2 <UART_SetConfig+0x222>
 8003da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da6:	d00b      	beq.n	8003dc0 <UART_SetConfig+0x210>
 8003da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dac:	d811      	bhi.n	8003dd2 <UART_SetConfig+0x222>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <UART_SetConfig+0x20a>
 8003db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db6:	d006      	beq.n	8003dc6 <UART_SetConfig+0x216>
 8003db8:	e00b      	b.n	8003dd2 <UART_SetConfig+0x222>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	76fb      	strb	r3, [r7, #27]
 8003dbe:	e038      	b.n	8003e32 <UART_SetConfig+0x282>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	76fb      	strb	r3, [r7, #27]
 8003dc4:	e035      	b.n	8003e32 <UART_SetConfig+0x282>
 8003dc6:	2304      	movs	r3, #4
 8003dc8:	76fb      	strb	r3, [r7, #27]
 8003dca:	e032      	b.n	8003e32 <UART_SetConfig+0x282>
 8003dcc:	2308      	movs	r3, #8
 8003dce:	76fb      	strb	r3, [r7, #27]
 8003dd0:	e02f      	b.n	8003e32 <UART_SetConfig+0x282>
 8003dd2:	2310      	movs	r3, #16
 8003dd4:	76fb      	strb	r3, [r7, #27]
 8003dd6:	e02c      	b.n	8003e32 <UART_SetConfig+0x282>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a2d      	ldr	r2, [pc, #180]	; (8003e94 <UART_SetConfig+0x2e4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d125      	bne.n	8003e2e <UART_SetConfig+0x27e>
 8003de2:	4b2e      	ldr	r3, [pc, #184]	; (8003e9c <UART_SetConfig+0x2ec>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003df0:	d017      	beq.n	8003e22 <UART_SetConfig+0x272>
 8003df2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003df6:	d817      	bhi.n	8003e28 <UART_SetConfig+0x278>
 8003df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfc:	d00b      	beq.n	8003e16 <UART_SetConfig+0x266>
 8003dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e02:	d811      	bhi.n	8003e28 <UART_SetConfig+0x278>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <UART_SetConfig+0x260>
 8003e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0c:	d006      	beq.n	8003e1c <UART_SetConfig+0x26c>
 8003e0e:	e00b      	b.n	8003e28 <UART_SetConfig+0x278>
 8003e10:	2300      	movs	r3, #0
 8003e12:	76fb      	strb	r3, [r7, #27]
 8003e14:	e00d      	b.n	8003e32 <UART_SetConfig+0x282>
 8003e16:	2302      	movs	r3, #2
 8003e18:	76fb      	strb	r3, [r7, #27]
 8003e1a:	e00a      	b.n	8003e32 <UART_SetConfig+0x282>
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	76fb      	strb	r3, [r7, #27]
 8003e20:	e007      	b.n	8003e32 <UART_SetConfig+0x282>
 8003e22:	2308      	movs	r3, #8
 8003e24:	76fb      	strb	r3, [r7, #27]
 8003e26:	e004      	b.n	8003e32 <UART_SetConfig+0x282>
 8003e28:	2310      	movs	r3, #16
 8003e2a:	76fb      	strb	r3, [r7, #27]
 8003e2c:	e001      	b.n	8003e32 <UART_SetConfig+0x282>
 8003e2e:	2310      	movs	r3, #16
 8003e30:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <UART_SetConfig+0x2e4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	f040 8087 	bne.w	8003f4c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e3e:	7efb      	ldrb	r3, [r7, #27]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d837      	bhi.n	8003eb4 <UART_SetConfig+0x304>
 8003e44:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <UART_SetConfig+0x29c>)
 8003e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4a:	bf00      	nop
 8003e4c:	08003e71 	.word	0x08003e71
 8003e50:	08003eb5 	.word	0x08003eb5
 8003e54:	08003e79 	.word	0x08003e79
 8003e58:	08003eb5 	.word	0x08003eb5
 8003e5c:	08003e7f 	.word	0x08003e7f
 8003e60:	08003eb5 	.word	0x08003eb5
 8003e64:	08003eb5 	.word	0x08003eb5
 8003e68:	08003eb5 	.word	0x08003eb5
 8003e6c:	08003e87 	.word	0x08003e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e70:	f7ff f874 	bl	8002f5c <HAL_RCC_GetPCLK1Freq>
 8003e74:	6178      	str	r0, [r7, #20]
        break;
 8003e76:	e022      	b.n	8003ebe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e78:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <UART_SetConfig+0x300>)
 8003e7a:	617b      	str	r3, [r7, #20]
        break;
 8003e7c:	e01f      	b.n	8003ebe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e7e:	f7fe ffd5 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 8003e82:	6178      	str	r0, [r7, #20]
        break;
 8003e84:	e01b      	b.n	8003ebe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8a:	617b      	str	r3, [r7, #20]
        break;
 8003e8c:	e017      	b.n	8003ebe <UART_SetConfig+0x30e>
 8003e8e:	bf00      	nop
 8003e90:	efff69f3 	.word	0xefff69f3
 8003e94:	40008000 	.word	0x40008000
 8003e98:	40013800 	.word	0x40013800
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	40004400 	.word	0x40004400
 8003ea4:	40004800 	.word	0x40004800
 8003ea8:	40004c00 	.word	0x40004c00
 8003eac:	40005000 	.word	0x40005000
 8003eb0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	76bb      	strb	r3, [r7, #26]
        break;
 8003ebc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80f1 	beq.w	80040a8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4413      	add	r3, r2
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d305      	bcc.n	8003ee2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d902      	bls.n	8003ee8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	76bb      	strb	r3, [r7, #26]
 8003ee6:	e0df      	b.n	80040a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f04f 0100 	mov.w	r1, #0
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	020b      	lsls	r3, r1, #8
 8003efa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003efe:	0202      	lsls	r2, r0, #8
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	6849      	ldr	r1, [r1, #4]
 8003f04:	0849      	lsrs	r1, r1, #1
 8003f06:	4608      	mov	r0, r1
 8003f08:	f04f 0100 	mov.w	r1, #0
 8003f0c:	1814      	adds	r4, r2, r0
 8003f0e:	eb43 0501 	adc.w	r5, r3, r1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	4629      	mov	r1, r5
 8003f20:	f7fc fd50 	bl	80009c4 <__aeabi_uldivmod>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4613      	mov	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f32:	d308      	bcc.n	8003f46 <UART_SetConfig+0x396>
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f3a:	d204      	bcs.n	8003f46 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	60da      	str	r2, [r3, #12]
 8003f44:	e0b0      	b.n	80040a8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	76bb      	strb	r3, [r7, #26]
 8003f4a:	e0ad      	b.n	80040a8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f54:	d15c      	bne.n	8004010 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003f56:	7efb      	ldrb	r3, [r7, #27]
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d828      	bhi.n	8003fae <UART_SetConfig+0x3fe>
 8003f5c:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <UART_SetConfig+0x3b4>)
 8003f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f62:	bf00      	nop
 8003f64:	08003f89 	.word	0x08003f89
 8003f68:	08003f91 	.word	0x08003f91
 8003f6c:	08003f99 	.word	0x08003f99
 8003f70:	08003faf 	.word	0x08003faf
 8003f74:	08003f9f 	.word	0x08003f9f
 8003f78:	08003faf 	.word	0x08003faf
 8003f7c:	08003faf 	.word	0x08003faf
 8003f80:	08003faf 	.word	0x08003faf
 8003f84:	08003fa7 	.word	0x08003fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f88:	f7fe ffe8 	bl	8002f5c <HAL_RCC_GetPCLK1Freq>
 8003f8c:	6178      	str	r0, [r7, #20]
        break;
 8003f8e:	e013      	b.n	8003fb8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f90:	f7fe fffa 	bl	8002f88 <HAL_RCC_GetPCLK2Freq>
 8003f94:	6178      	str	r0, [r7, #20]
        break;
 8003f96:	e00f      	b.n	8003fb8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f98:	4b49      	ldr	r3, [pc, #292]	; (80040c0 <UART_SetConfig+0x510>)
 8003f9a:	617b      	str	r3, [r7, #20]
        break;
 8003f9c:	e00c      	b.n	8003fb8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f9e:	f7fe ff45 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 8003fa2:	6178      	str	r0, [r7, #20]
        break;
 8003fa4:	e008      	b.n	8003fb8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003faa:	617b      	str	r3, [r7, #20]
        break;
 8003fac:	e004      	b.n	8003fb8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	76bb      	strb	r3, [r7, #26]
        break;
 8003fb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d074      	beq.n	80040a8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	005a      	lsls	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	085b      	lsrs	r3, r3, #1
 8003fc8:	441a      	add	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b0f      	cmp	r3, #15
 8003fda:	d916      	bls.n	800400a <UART_SetConfig+0x45a>
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe2:	d212      	bcs.n	800400a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	f023 030f 	bic.w	r3, r3, #15
 8003fec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	085b      	lsrs	r3, r3, #1
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	89fb      	ldrh	r3, [r7, #14]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	89fa      	ldrh	r2, [r7, #14]
 8004006:	60da      	str	r2, [r3, #12]
 8004008:	e04e      	b.n	80040a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	76bb      	strb	r3, [r7, #26]
 800400e:	e04b      	b.n	80040a8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004010:	7efb      	ldrb	r3, [r7, #27]
 8004012:	2b08      	cmp	r3, #8
 8004014:	d827      	bhi.n	8004066 <UART_SetConfig+0x4b6>
 8004016:	a201      	add	r2, pc, #4	; (adr r2, 800401c <UART_SetConfig+0x46c>)
 8004018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401c:	08004041 	.word	0x08004041
 8004020:	08004049 	.word	0x08004049
 8004024:	08004051 	.word	0x08004051
 8004028:	08004067 	.word	0x08004067
 800402c:	08004057 	.word	0x08004057
 8004030:	08004067 	.word	0x08004067
 8004034:	08004067 	.word	0x08004067
 8004038:	08004067 	.word	0x08004067
 800403c:	0800405f 	.word	0x0800405f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004040:	f7fe ff8c 	bl	8002f5c <HAL_RCC_GetPCLK1Freq>
 8004044:	6178      	str	r0, [r7, #20]
        break;
 8004046:	e013      	b.n	8004070 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004048:	f7fe ff9e 	bl	8002f88 <HAL_RCC_GetPCLK2Freq>
 800404c:	6178      	str	r0, [r7, #20]
        break;
 800404e:	e00f      	b.n	8004070 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004050:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <UART_SetConfig+0x510>)
 8004052:	617b      	str	r3, [r7, #20]
        break;
 8004054:	e00c      	b.n	8004070 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004056:	f7fe fee9 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 800405a:	6178      	str	r0, [r7, #20]
        break;
 800405c:	e008      	b.n	8004070 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800405e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004062:	617b      	str	r3, [r7, #20]
        break;
 8004064:	e004      	b.n	8004070 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	76bb      	strb	r3, [r7, #26]
        break;
 800406e:	bf00      	nop
    }

    if (pclk != 0U)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d018      	beq.n	80040a8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	085a      	lsrs	r2, r3, #1
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	441a      	add	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	fbb2 f3f3 	udiv	r3, r2, r3
 8004088:	b29b      	uxth	r3, r3
 800408a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	2b0f      	cmp	r3, #15
 8004090:	d908      	bls.n	80040a4 <UART_SetConfig+0x4f4>
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004098:	d204      	bcs.n	80040a4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	60da      	str	r2, [r3, #12]
 80040a2:	e001      	b.n	80040a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80040b4:	7ebb      	ldrb	r3, [r7, #26]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3720      	adds	r7, #32
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bdb0      	pop	{r4, r5, r7, pc}
 80040be:	bf00      	nop
 80040c0:	00f42400 	.word	0x00f42400

080040c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d01a      	beq.n	80041da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041c2:	d10a      	bne.n	80041da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	605a      	str	r2, [r3, #4]
  }
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af02      	add	r7, sp, #8
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004218:	f7fd f92a 	bl	8001470 <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b08      	cmp	r3, #8
 800422a:	d10e      	bne.n	800424a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800422c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f82d 	bl	800429a <UART_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e023      	b.n	8004292 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b04      	cmp	r3, #4
 8004256:	d10e      	bne.n	8004276 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004258:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f817 	bl	800429a <UART_WaitOnFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e00d      	b.n	8004292 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	603b      	str	r3, [r7, #0]
 80042a6:	4613      	mov	r3, r2
 80042a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042aa:	e05e      	b.n	800436a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b2:	d05a      	beq.n	800436a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b4:	f7fd f8dc 	bl	8001470 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d302      	bcc.n	80042ca <UART_WaitOnFlagUntilTimeout+0x30>
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d11b      	bne.n	8004302 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042d8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0201 	bic.w	r2, r2, #1
 80042e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2220      	movs	r2, #32
 80042ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2220      	movs	r2, #32
 80042f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e043      	b.n	800438a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b00      	cmp	r3, #0
 800430e:	d02c      	beq.n	800436a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800431e:	d124      	bne.n	800436a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004328:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004338:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0201 	bic.w	r2, r2, #1
 8004348:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2220      	movs	r2, #32
 800435a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e00f      	b.n	800438a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4013      	ands	r3, r2
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	429a      	cmp	r2, r3
 8004378:	bf0c      	ite	eq
 800437a:	2301      	moveq	r3, #1
 800437c:	2300      	movne	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	429a      	cmp	r2, r3
 8004386:	d091      	beq.n	80042ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <__libc_init_array>:
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	4d0d      	ldr	r5, [pc, #52]	; (80043cc <__libc_init_array+0x38>)
 8004398:	4c0d      	ldr	r4, [pc, #52]	; (80043d0 <__libc_init_array+0x3c>)
 800439a:	1b64      	subs	r4, r4, r5
 800439c:	10a4      	asrs	r4, r4, #2
 800439e:	2600      	movs	r6, #0
 80043a0:	42a6      	cmp	r6, r4
 80043a2:	d109      	bne.n	80043b8 <__libc_init_array+0x24>
 80043a4:	4d0b      	ldr	r5, [pc, #44]	; (80043d4 <__libc_init_array+0x40>)
 80043a6:	4c0c      	ldr	r4, [pc, #48]	; (80043d8 <__libc_init_array+0x44>)
 80043a8:	f000 f87c 	bl	80044a4 <_init>
 80043ac:	1b64      	subs	r4, r4, r5
 80043ae:	10a4      	asrs	r4, r4, #2
 80043b0:	2600      	movs	r6, #0
 80043b2:	42a6      	cmp	r6, r4
 80043b4:	d105      	bne.n	80043c2 <__libc_init_array+0x2e>
 80043b6:	bd70      	pop	{r4, r5, r6, pc}
 80043b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043bc:	4798      	blx	r3
 80043be:	3601      	adds	r6, #1
 80043c0:	e7ee      	b.n	80043a0 <__libc_init_array+0xc>
 80043c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c6:	4798      	blx	r3
 80043c8:	3601      	adds	r6, #1
 80043ca:	e7f2      	b.n	80043b2 <__libc_init_array+0x1e>
 80043cc:	08004548 	.word	0x08004548
 80043d0:	08004548 	.word	0x08004548
 80043d4:	08004548 	.word	0x08004548
 80043d8:	0800454c 	.word	0x0800454c

080043dc <__itoa>:
 80043dc:	1e93      	subs	r3, r2, #2
 80043de:	2b22      	cmp	r3, #34	; 0x22
 80043e0:	b510      	push	{r4, lr}
 80043e2:	460c      	mov	r4, r1
 80043e4:	d904      	bls.n	80043f0 <__itoa+0x14>
 80043e6:	2300      	movs	r3, #0
 80043e8:	700b      	strb	r3, [r1, #0]
 80043ea:	461c      	mov	r4, r3
 80043ec:	4620      	mov	r0, r4
 80043ee:	bd10      	pop	{r4, pc}
 80043f0:	2a0a      	cmp	r2, #10
 80043f2:	d109      	bne.n	8004408 <__itoa+0x2c>
 80043f4:	2800      	cmp	r0, #0
 80043f6:	da07      	bge.n	8004408 <__itoa+0x2c>
 80043f8:	232d      	movs	r3, #45	; 0x2d
 80043fa:	700b      	strb	r3, [r1, #0]
 80043fc:	4240      	negs	r0, r0
 80043fe:	2101      	movs	r1, #1
 8004400:	4421      	add	r1, r4
 8004402:	f000 f80d 	bl	8004420 <__utoa>
 8004406:	e7f1      	b.n	80043ec <__itoa+0x10>
 8004408:	2100      	movs	r1, #0
 800440a:	e7f9      	b.n	8004400 <__itoa+0x24>

0800440c <itoa>:
 800440c:	f7ff bfe6 	b.w	80043dc <__itoa>

08004410 <memset>:
 8004410:	4402      	add	r2, r0
 8004412:	4603      	mov	r3, r0
 8004414:	4293      	cmp	r3, r2
 8004416:	d100      	bne.n	800441a <memset+0xa>
 8004418:	4770      	bx	lr
 800441a:	f803 1b01 	strb.w	r1, [r3], #1
 800441e:	e7f9      	b.n	8004414 <memset+0x4>

08004420 <__utoa>:
 8004420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004422:	4c1f      	ldr	r4, [pc, #124]	; (80044a0 <__utoa+0x80>)
 8004424:	b08b      	sub	sp, #44	; 0x2c
 8004426:	4605      	mov	r5, r0
 8004428:	460b      	mov	r3, r1
 800442a:	466e      	mov	r6, sp
 800442c:	f104 0c20 	add.w	ip, r4, #32
 8004430:	6820      	ldr	r0, [r4, #0]
 8004432:	6861      	ldr	r1, [r4, #4]
 8004434:	4637      	mov	r7, r6
 8004436:	c703      	stmia	r7!, {r0, r1}
 8004438:	3408      	adds	r4, #8
 800443a:	4564      	cmp	r4, ip
 800443c:	463e      	mov	r6, r7
 800443e:	d1f7      	bne.n	8004430 <__utoa+0x10>
 8004440:	7921      	ldrb	r1, [r4, #4]
 8004442:	7139      	strb	r1, [r7, #4]
 8004444:	1e91      	subs	r1, r2, #2
 8004446:	6820      	ldr	r0, [r4, #0]
 8004448:	6038      	str	r0, [r7, #0]
 800444a:	2922      	cmp	r1, #34	; 0x22
 800444c:	f04f 0100 	mov.w	r1, #0
 8004450:	d904      	bls.n	800445c <__utoa+0x3c>
 8004452:	7019      	strb	r1, [r3, #0]
 8004454:	460b      	mov	r3, r1
 8004456:	4618      	mov	r0, r3
 8004458:	b00b      	add	sp, #44	; 0x2c
 800445a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800445c:	1e58      	subs	r0, r3, #1
 800445e:	4684      	mov	ip, r0
 8004460:	fbb5 f7f2 	udiv	r7, r5, r2
 8004464:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004468:	fb02 5617 	mls	r6, r2, r7, r5
 800446c:	4476      	add	r6, lr
 800446e:	460c      	mov	r4, r1
 8004470:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004474:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004478:	462e      	mov	r6, r5
 800447a:	42b2      	cmp	r2, r6
 800447c:	f101 0101 	add.w	r1, r1, #1
 8004480:	463d      	mov	r5, r7
 8004482:	d9ed      	bls.n	8004460 <__utoa+0x40>
 8004484:	2200      	movs	r2, #0
 8004486:	545a      	strb	r2, [r3, r1]
 8004488:	1919      	adds	r1, r3, r4
 800448a:	1aa5      	subs	r5, r4, r2
 800448c:	42aa      	cmp	r2, r5
 800448e:	dae2      	bge.n	8004456 <__utoa+0x36>
 8004490:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004494:	780e      	ldrb	r6, [r1, #0]
 8004496:	7006      	strb	r6, [r0, #0]
 8004498:	3201      	adds	r2, #1
 800449a:	f801 5901 	strb.w	r5, [r1], #-1
 800449e:	e7f4      	b.n	800448a <__utoa+0x6a>
 80044a0:	08004518 	.word	0x08004518

080044a4 <_init>:
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a6:	bf00      	nop
 80044a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044aa:	bc08      	pop	{r3}
 80044ac:	469e      	mov	lr, r3
 80044ae:	4770      	bx	lr

080044b0 <_fini>:
 80044b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b2:	bf00      	nop
 80044b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b6:	bc08      	pop	{r3}
 80044b8:	469e      	mov	lr, r3
 80044ba:	4770      	bx	lr
